using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Binance.Net.Clients;
using Binance.Net.Objects.Models.Futures.Socket;
using CryptoExchange.Net.Sockets;
using Models;
using Config;

namespace Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 15-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ AggregateTrade
    /// </summary>
    public class FifteenSecondCandleService
    {
        private readonly BinanceSocketClient _socketClient;
        private readonly DataStorageService _dataStorage;
        private readonly BackendConfig _config;
        
        // –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–≤–µ—á–µ–π
        private readonly ConcurrentDictionary<string, UpdateSubscription> _aggTradeSubscriptions = new();
        private readonly ConcurrentDictionary<string, FifteenSecondCandleBuilder> _candleBuilders = new();
        private readonly ConcurrentDictionary<string, List<CandleData>> _fifteenSecondCandles = new();
        
        private readonly Timer? _candleTimer;
        private volatile bool _isRunning = false;

        // –°–æ–±—ã—Ç–∏—è
        public event Action<string, CandleData>? OnFifteenSecondCandle;
        public event Action<string>? OnWarmupCompleted;

        public FifteenSecondCandleService(
            BinanceSocketClient socketClient,
            DataStorageService dataStorage,
            BackendConfig config)
        {
            _socketClient = socketClient;
            _dataStorage = dataStorage;
            _config = config;
            
            // –¢–∞–π–º–µ—Ä –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ç–±–∏–≤–∫–∏ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
            _candleTimer = new Timer(FlushCandles, null, GetNextFifteenSecondInterval(), TimeSpan.FromSeconds(15));
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ AggregateTrade –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
        /// </summary>
        public async Task<bool> StartAsync(List<string> symbols)
        {
            if (_isRunning)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è 15s Candle Service —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
                return false;
            }

            if (!_config.EnableFifteenSecondTrading)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ÑπÔ∏è 15-—Å–µ–∫—É–Ω–¥–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ");
                return false;
            }

            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üî• –ó–∞–ø—É—Å–∫ 15s —Å–≤–µ—á–µ–π –¥–ª—è {symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤...");
                
                var batchSize = 20;
                var successCount = 0;

                for (int i = 0; i < symbols.Count; i += batchSize)
                {
                    var batch = symbols.Skip(i).Take(batchSize).ToList();
                    
                    var subscription = await _socketClient.UsdFuturesApi.SubscribeToAggregatedTradeUpdatesAsync(
                        batch,
                        (update) =>
                        {
                            var symbol = update.Data.Symbol;
                            var price = update.Data.Price;
                            var quantity = update.Data.Quantity;
                            var timestamp = update.Data.TradeTime;

                            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º builder –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                            var builder = _candleBuilders.GetOrAdd(symbol, _ => new FifteenSecondCandleBuilder());
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–π–¥
                            builder.AddTrade(price, quantity, timestamp);
                        });

                    if (subscription.Success)
                    {
                        foreach (var symbol in batch)
                        {
                            _aggTradeSubscriptions[symbol] = subscription.Data;
                            _fifteenSecondCandles[symbol] = new List<CandleData>();
                        }
                        successCount += batch.Count;
                    }
                    else
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ AggTrades: {subscription.Error}");
                    }

                    await Task.Delay(100);
                }

                _isRunning = true;
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ 15s —Å–≤–µ—á–∏ –∑–∞–ø—É—â–µ–Ω—ã –¥–ª—è {successCount}/{symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üïê –ü—Ä–æ–≥—Ä–µ–≤: –∂–¥—ë–º {_config.FifteenSecondWarmupCandles} —Å–≤–µ—á–µ–π");
                
                return successCount > 0;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ 15s —Å–µ—Ä–≤–∏—Å–∞: {ex.Message}");
                await StopAsync();
                return false;
            }
        }

        /// <summary>
        /// –¢–æ—á–Ω–∞—è –æ—Ç–±–∏–≤–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        /// </summary>
        private void FlushCandles(object? state)
        {
            if (!_isRunning) return;

            var currentTime = DateTime.UtcNow;
            var flushTime = GetCurrentFifteenSecondMark(currentTime);

            foreach (var kvp in _candleBuilders)
            {
                var symbol = kvp.Key;
                var builder = kvp.Value;

                var candle = builder.BuildCandle(flushTime);
                if (candle != null)
                {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                    var candles = _fifteenSecondCandles[symbol];
                    candles.Add(candle);
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
                    while (candles.Count > _config.FifteenSecondWarmupCandles + 10)
                    {
                        candles.RemoveAt(0);
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ–≤
                    if (candles.Count >= _config.FifteenSecondWarmupCandles)
                    {
                        OnWarmupCompleted?.Invoke(symbol);
                    }

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    OnFifteenSecondCandle?.Invoke(symbol, candle);

                    // –£–±—Ä–∞–ª–∏ –ª–æ–≥ —Ü–µ–Ω - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —à—É–º–∞
                }
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å 15-—Å–µ–∫—É–Ω–¥–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        /// </summary>
        public List<CandleData>? GetFifteenSecondCandles(string symbol)
        {
            return _fifteenSecondCandles.TryGetValue(symbol, out var candles) ? candles : null;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞ (–ø—Ä–æ–≥—Ä–µ—Ç –ª–∏)
        /// </summary>
        public bool IsSymbolReady(string symbol)
        {
            return _fifteenSecondCandles.TryGetValue(symbol, out var candles) && 
                   candles.Count >= _config.FifteenSecondWarmupCandles;
        }

        /// <summary>
        /// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ 15s –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        /// </summary>
        public async Task RemoveSymbolsAsync(List<string> symbolsToRemove)
        {
            if (!_isRunning || symbolsToRemove.Count == 0) return;

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üö´ –£–¥–∞–ª–µ–Ω–∏–µ 15s —Å–∏–º–≤–æ–ª–æ–≤: {symbolsToRemove.Count} –º–æ–Ω–µ—Ç");

            foreach (var symbol in symbolsToRemove)
            {
                if (_aggTradeSubscriptions.TryRemove(symbol, out var subscription))
                {
                    try
                    {
                        await subscription.CloseAsync();
                        _candleBuilders.TryRemove(symbol, out _);
                        _fifteenSecondCandles.TryRemove(symbol, out _);
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ûñ –£–¥–∞–ª–µ–Ω 15s: {symbol} (–∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –ø—É–ª–∞)");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ {symbol}: {ex.Message}");
                    }
                }
            }
        }

        /// <summary>
        /// –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        /// </summary>
        public async Task UpdateSymbolsAsync(List<string> newSymbols)
        {
            if (!_isRunning) return;

            var currentSymbols = _aggTradeSubscriptions.Keys.ToHashSet();
            var newSymbolsSet = newSymbols.ToHashSet();

            // –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
            var toAdd = newSymbolsSet.Except(currentSymbols).ToList();
            var toRemove = currentSymbols.Except(newSymbolsSet).ToList();

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üîÑ 15s –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: +{toAdd.Count} -{toRemove.Count} ={newSymbolsSet.Count} –º–æ–Ω–µ—Ç");

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã
            foreach (var symbol in toRemove)
            {
                if (_aggTradeSubscriptions.TryRemove(symbol, out var subscription))
                {
                    try
                    {
                        await subscription.CloseAsync();
                        _candleBuilders.TryRemove(symbol, out _);
                        _fifteenSecondCandles.TryRemove(symbol, out _);
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –£–¥–∞–ª–µ–Ω 15s: {symbol}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {symbol}: {ex.Message}");
                    }
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            if (toAdd.Count > 0)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ûï –î–æ–±–∞–≤–ª—è–µ–º 15s –¥–ª—è {toAdd.Count} –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç");
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10
                const int batchSize = 10;
                int addedCount = 0;

                for (int i = 0; i < toAdd.Count; i += batchSize)
                {
                    var batch = toAdd.Skip(i).Take(batchSize).ToList();
                    
                    var subscription = await _socketClient.UsdFuturesApi.SubscribeToAggregatedTradeUpdatesAsync(
                        batch,
                        update =>
                        {
                            var symbol = update.Data.Symbol;
                            var price = update.Data.Price;
                            var quantity = update.Data.Quantity;
                            var timestamp = update.Data.TradeTime;

                            var builder = _candleBuilders.GetOrAdd(symbol, _ => new FifteenSecondCandleBuilder());
                            builder.AddTrade(price, quantity, timestamp);
                        });

                    if (subscription.Success)
                    {
                        foreach (var symbol in batch)
                        {
                            _aggTradeSubscriptions[symbol] = subscription.Data;
                            _fifteenSecondCandles[symbol] = new List<CandleData>();
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω 15s: {symbol} (–ø—Ä–æ–≥—Ä–µ–≤ —Å –Ω—É–ª—è)");
                        }
                        addedCount += batch.Count;
                    }
                    else
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 15s –ø–∞–∫–µ—Ç–∞: {subscription.Error}");
                    }

                    await Task.Delay(100);
                }

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 15s: {addedCount}/{toAdd.Count} —Å–∏–º–≤–æ–ª–æ–≤");
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–µ—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            var preservedCount = currentSymbols.Intersect(newSymbolsSet).Count();
            if (preservedCount > 0)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üíé –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–æ–≥—Ä–µ—Ç—ã—Ö 15s: {preservedCount} –º–æ–Ω–µ—Ç");
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
        /// </summary>
        public async Task StopAsync()
        {
            if (!_isRunning) return;

            _isRunning = false;
            _candleTimer?.Dispose();

            foreach (var subscription in _aggTradeSubscriptions.Values)
            {
                try
                {
                    await subscription.CloseAsync();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {ex.Message}");
                }
            }

            _aggTradeSubscriptions.Clear();
            _candleBuilders.Clear();
            _fifteenSecondCandles.Clear();

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üî• 15s Candle Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        #region Helpers

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é 15-—Å–µ–∫—É–Ω–¥–Ω—É—é –æ—Ç–º–µ—Ç–∫—É
        /// </summary>
        private TimeSpan GetNextFifteenSecondInterval()
        {
            var now = DateTime.UtcNow;
            var nextMark = GetCurrentFifteenSecondMark(now).AddSeconds(15);
            return nextMark - now;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é 15-—Å–µ–∫—É–Ω–¥–Ω—É—é –æ—Ç–º–µ—Ç–∫—É
        /// </summary>
        private DateTime GetCurrentFifteenSecondMark(DateTime time)
        {
            var seconds = time.Second;
            var aligned = (seconds / 15) * 15;
            return new DateTime(time.Year, time.Month, time.Day, time.Hour, time.Minute, aligned, DateTimeKind.Utc);
        }

        #endregion
    }

    /// <summary>
    /// –ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è 15-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ —Ç—Ä–µ–π–¥–æ–≤
    /// </summary>
    public class FifteenSecondCandleBuilder
    {
        private decimal? _open;
        private decimal _high = decimal.MinValue;
        private decimal _low = decimal.MaxValue;
        private decimal _close;
        private decimal _volume = 0;
        private DateTime _openTime;
        private readonly object _lock = new object();

        public void AddTrade(decimal price, decimal quantity, DateTime tradeTime)
        {
            lock (_lock)
            {
                // –ü–µ—Ä–≤—ã–π —Ç—Ä–µ–π–¥ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
                if (_open == null)
                {
                    _open = price;
                    _openTime = tradeTime;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º High/Low/Close/Volume
                if (price > _high) _high = price;
                if (price < _low) _low = price;
                _close = price;
                _volume += quantity;
            }
        }

        public CandleData? BuildCandle(DateTime closeTime)
        {
            lock (_lock)
            {
                if (_open == null) return null;

                var candle = new CandleData
                {
                    OpenTime = _openTime,
                    Open = _open.Value,
                    High = _high,
                    Low = _low,
                    Close = _close,
                    Volume = _volume
                };

                // –°–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                _open = null;
                _high = decimal.MinValue;
                _low = decimal.MaxValue;
                _close = 0;
                _volume = 0;

                return candle;
            }
        }
    }
}
