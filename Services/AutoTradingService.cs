using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using Binance.Net.Clients;
using Models;
using Config;
using Trading;

namespace Services
{
    /// <summary>
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π HFT –∞–Ω–∞–ª–∏–∑ —Å —Ç–æ—Ä–≥–æ–≤—ã–º –º–æ–¥—É–ª–µ–º
    /// </summary>
    public class AutoTradingService
    {
        private readonly HftSignalEngineService _hftEngine;
        private readonly DataStorageService _dataStorage;
        private readonly UniverseUpdateService _universeService;
        private readonly MultiSymbolWebSocketService _webSocketService;
        private readonly TradingStrategyService _strategyService;
        private readonly BackendConfig _backendConfig;
        private readonly TradingConfig _tradingConfig;
        private readonly AutoTradingConfig _autoTradingConfig;
        private readonly BinanceRestClient _restClient;
        private readonly BinanceSocketClient _socketClient;
        private readonly SimpleStateManager _stateManager;
        private readonly BinanceDataService _binanceDataService;

        // –¢–æ—Ä–≥–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        private readonly ConcurrentDictionary<string, TradingModule> _activeTradingModules = new();
        private readonly ConcurrentDictionary<string, DateTime> _lastTradeTime = new();
        private readonly ConcurrentDictionary<string, string> _lastSignal = new();
        private readonly ConcurrentDictionary<string, SimpleStateManager.ActivePosition> _activePositions = new();
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        private readonly ConcurrentDictionary<string, DateTime> _lastTimeframeMark = new();

        // Timer –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–ª–∞ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤ AutonomousEngine
        private volatile bool _isRunning = false;
        private DateTime _startTime;
        private DateTime _systemStartTime;

        // –°–æ–±—ã—Ç–∏—è
        public event Action<string, string, StrategyResult>? OnSignalReceived;
        public event Action<string, string>? OnTradeOpened;
        public event Action<string, string>? OnTradeClosed;
        public event Action<string>? OnError;

        public AutoTradingService(
            HftSignalEngineService hftEngine,
            DataStorageService dataStorage,
            UniverseUpdateService universeService,
            MultiSymbolWebSocketService webSocketService,
            TradingStrategyService strategyService,
            BackendConfig backendConfig,
            TradingConfig tradingConfig,
            AutoTradingConfig autoTradingConfig,
            BinanceRestClient restClient,
            BinanceSocketClient socketClient,
            SimpleStateManager stateManager)
        {
            _hftEngine = hftEngine;
            _dataStorage = dataStorage;
            _universeService = universeService;
            _webSocketService = webSocketService;
            _strategyService = strategyService;
            _backendConfig = backendConfig;
            _tradingConfig = tradingConfig;
            _autoTradingConfig = autoTradingConfig;
            _restClient = restClient;
            _socketClient = socketClient;
            _stateManager = stateManager;
            _binanceDataService = new BinanceDataService(restClient, backendConfig);
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        public async Task<bool> StartAsync()
        {
            if (_isRunning)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞");
                return false;
            }

            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ===============================================");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö° HFT –∞–Ω–∞–ª–∏–∑: –∫–∞–∂–¥—ã–µ 100–º—Å");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üéØ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π: {_autoTradingConfig.MaxConcurrentPositions}");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚è∞ –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏: {_autoTradingConfig.MinTimeBetweenTradesMinutes} –º–∏–Ω");
                Console.WriteLine();

                _startTime = DateTime.UtcNow;
                _systemStartTime = DateTime.UtcNow; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
                _isRunning = true;

                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...");
                await RestoreStateAsync();
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π...");
                await SynchronizePositionsAsync();

                // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
                var universeResult = await _universeService.UpdateUniverseAsync();
                if (!universeResult.Success)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {universeResult.ErrorMessage}");
                    return false;
                }

                var filteredCoins = _dataStorage.GetFilteredCoins(_backendConfig.MinVolumeUsdt, _backendConfig.MinNatrPercent);
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {filteredCoins.Count} –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏");

                // –ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω
                var symbols = filteredCoins.Take(20).Select(c => c.Symbol).ToList(); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                await _webSocketService.StartAsync(symbols);
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üì° WebSocket –∑–∞–ø—É—â–µ–Ω –¥–ª—è {symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤");

                // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è WebSocket —Å HFT –¥–≤–∏–∂–∫–æ–º
                _webSocketService.OnPriceUpdate += (symbol, price) =>
                {
                    _hftEngine.UpdatePrice(symbol, price);
                };

                // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã HFT –¥–≤–∏–∂–∫–∞
                _hftEngine.OnHftSignalChange += OnHftSignalChangeHandler;

                // HFT –¥–≤–∏–∂–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ AutonomousEngine, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–µ–º—É
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞ –º–æ–Ω–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ AutonomousEngine, –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üéØ –û–∂–∏–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...");
                Console.WriteLine();

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: {ex.Message}");
                _isRunning = false;
                OnError?.Invoke($"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç HFT –¥–≤–∏–∂–∫–∞
        /// </summary>
        private async void OnHftSignalChangeHandler(HftSignalEvent hftEvent)
        {
            try
            {
                if (!_isRunning || hftEvent.NewSignal == "FLAT") return;

                var symbol = hftEvent.Symbol;
                var newSignal = hftEvent.NewSignal;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å–∏–≥–Ω–∞–ª
                if (_lastSignal.TryGetValue(symbol, out var lastSignal) && lastSignal == newSignal)
                    return;

                _lastSignal[symbol] = newSignal;

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üéØ –¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ: {symbol} ‚Üí {GetSignalEmoji(newSignal)}{newSignal}");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üí∞ –¶–µ–Ω–∞: {hftEvent.Price:F6}");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üìä Z-Score: {hftEvent.ZScore:F2}");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    ‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞: {hftEvent.LatencyMs}–º—Å");

                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                var coinData = _dataStorage.GetCoinData(symbol);
                if (coinData == null) return;

                var strategyResult = _strategyService.AnalyzeCoin(coinData);
                OnSignalReceived?.Invoke(symbol, newSignal, strategyResult);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
                if (await CanOpenTradeAsync(symbol, newSignal, strategyResult))
                {
                    await OpenTradeAsync(symbol, newSignal, strategyResult);
                }
                else
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚è∏Ô∏è –°–¥–µ–ª–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞: {GetTradeBlockReason(symbol)}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {hftEvent.Symbol}: {ex.Message}");
                OnError?.Invoke($"–û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ {hftEvent.Symbol}: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
        /// </summary>
        private async Task<bool> CanOpenTradeAsync(string symbol, string signal, StrategyResult strategyResult)
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ 0: –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞
            if (!_autoTradingConfig.EnableAutoTrading)
            {
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if (_activeTradingModules.Count >= _autoTradingConfig.MaxConcurrentPositions)
            {
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
            if (_activeTradingModules.ContainsKey(symbol))
            {
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
            if (_lastTradeTime.TryGetValue(symbol, out var lastTime))
            {
                var minTime = TimeSpan.FromMinutes(_autoTradingConfig.MinTimeBetweenTradesMinutes);
                if (DateTime.UtcNow - lastTime < minTime)
                {
                    return false;
                }
            }

            // –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ü–µ—Ä–≤—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            var timeSinceStart = DateTime.UtcNow - _systemStartTime;
            if (timeSinceStart.TotalSeconds < 5)
            {
                return false;
            }
            
            // –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è

            return true;
        }

        /// <summary>
        /// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        /// </summary>
        private async Task OpenTradeAsync(string symbol, string signal, StrategyResult strategyResult)
        {
            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò: {symbol} {signal}");

                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
                var tradingConfig = await CreateTradingConfigAsync(symbol, signal, strategyResult);
                
                // –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –º–æ–¥—É–ª—å
                var tradingModule = new TradingModule(_restClient, _socketClient, tradingConfig);

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é (TradingModule –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ)
                var tradingTask = Task.Run(async () =>
                {
                    try
                    {
                        await tradingModule.ExecuteTradeAsync();
                        OnTradeCompletedHandler(symbol, "Completed");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ {symbol}: {ex.Message}");
                        OnTradeCompletedHandler(symbol, $"Error: {ex.Message}");
                    }
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                _activeTradingModules[symbol] = tradingModule;
                _lastTradeTime[symbol] = DateTime.UtcNow;

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                var currentPrice = GetCurrentPrice(symbol);
                await SaveActivePositionAsync(symbol, signal, tradingConfig, currentPrice);

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {symbol} {signal}");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üí∞ –°—É–º–º–∞: {tradingConfig.UsdAmount} USDT");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üéØ Take Profit: {tradingConfig.TakeProfitPercent}%");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üõ°Ô∏è Stop Loss: {tradingConfig.StopLossPercent}%");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {_activeTradingModules.Count}/{_autoTradingConfig.MaxConcurrentPositions}");
                Console.WriteLine();

                OnTradeOpened?.Invoke(symbol, signal);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {ex.Message}");
                OnError?.Invoke($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è {symbol}: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        /// </summary>
        private async void OnTradeCompletedHandler(string symbol, string result)
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üèÅ –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê: {symbol} - {result}");
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏
            if (_activePositions.TryGetValue(symbol, out var position))
            {
                var tradeHistory = new SimpleStateManager.TradeHistoryRecord
                {
                    Symbol = symbol,
                    Side = position.Side,
                    UsdAmount = position.UsdAmount,
                    EntryPrice = position.EntryPrice,
                    Result = result,
                    CreatedAt = position.CreatedAt,
                    ClosedAt = DateTime.UtcNow,
                    Duration = DateTime.UtcNow - position.CreatedAt
                };

                await _stateManager.SaveTradeHistoryAsync(tradeHistory);
                await _stateManager.RemoveActivePositionAsync(symbol);
                _activePositions.TryRemove(symbol, out _);
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π (TradingModule –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ)
            _activeTradingModules.TryRemove(symbol, out _);

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {_activeTradingModules.Count}/{_autoTradingConfig.MaxConcurrentPositions}");
            OnTradeClosed?.Invoke(symbol, result);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
        /// </summary>
        private async Task<TradingConfig> CreateTradingConfigAsync(string symbol, string signal, StrategyResult strategyResult)
        {
            var side = signal == "LONG" ? "BUY" : "SELL";
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π TickSize –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            var tickSize = await _binanceDataService.GetTickSizeAsync(symbol);
            
            // –ü—Ä–æ—Å—Ç–æ–π fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã
            if (tickSize == null)
            {
                var currentPrice = GetCurrentPrice(symbol);
                if (currentPrice > 1)
                    tickSize = 0.01m;    // –î–ª—è –¥–æ—Ä–æ–≥–∏—Ö –º–æ–Ω–µ—Ç
                else if (currentPrice > 0.1m)
                    tickSize = 0.001m;   // –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –º–æ–Ω–µ—Ç  
                else if (currentPrice > 0.01m)
                    tickSize = 0.0001m;  // –î–ª—è –¥–µ—à–µ–≤—ã—Ö –º–æ–Ω–µ—Ç
                else
                    tickSize = 0.00001m; // –î–ª—è –æ—á–µ–Ω—å –¥–µ—à–µ–≤—ã—Ö –º–æ–Ω–µ—Ç
                    
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback TickSize –¥–ª—è {symbol}: {tickSize} (—Ü–µ–Ω–∞: {currentPrice})");
            }
            
            return new TradingConfig
            {
                Symbol = symbol,
                Side = side,
                UsdAmount = CalculateTradeAmount(strategyResult),
                TakeProfitPercent = _tradingConfig.TakeProfitPercent,
                StopLossPercent = _tradingConfig.StopLossPercent,
                EnableBreakEven = _tradingConfig.EnableBreakEven,
                BreakEvenActivationPercent = _tradingConfig.BreakEvenActivationPercent,
                BreakEvenStopLossPercent = _tradingConfig.BreakEvenStopLossPercent,
                TickSize = tickSize.Value,
                MonitorIntervalSeconds = _tradingConfig.MonitorIntervalSeconds
            };
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
        /// </summary>
        private decimal CalculateTradeAmount(StrategyResult strategyResult)
        {
            // –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            var baseAmount = _tradingConfig.UsdAmount;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            return baseAmount;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        /// </summary>
        private bool IsTimeframeCrossing(string symbol)
        {
            var now = DateTime.UtcNow;
            DateTime currentMark;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ—Ç–º–µ—Ç–∫—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            if (_backendConfig.EnableFifteenSecondTrading)
            {
                // 15-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: 00, 15, 30, 45 —Å–µ–∫—É–Ω–¥
                var seconds = (now.Second / 15) * 15;
                currentMark = new DateTime(now.Year, now.Month, now.Day, now.Hour, now.Minute, seconds, DateTimeKind.Utc);
            }
            else
            {
                // 1-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã
                currentMark = new DateTime(now.Year, now.Month, now.Day, now.Hour, now.Minute, 0, DateTimeKind.Utc);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–∏–∑–æ—à—ë–ª –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥
            if (_lastTimeframeMark.TryGetValue(symbol, out var lastMark))
            {
                if (currentMark <= lastMark)
                {
                    return false; // –ù–µ –±—ã–ª–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –æ—Ç–º–µ—Ç–∫—É –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
                _lastTimeframeMark[symbol] = currentMark;
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üïê –ü–ï–†–ï–•–û–î –¢–ê–ô–ú–§–†–ï–ô–ú–ê: {symbol} ‚Üí {currentMark:HH:mm:ss}");
                return true;
            }
            else
            {
                // –ü–ï–†–í–´–ô –†–ê–ó - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –Ω–æ –ù–ï —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
                _lastTimeframeMark[symbol] = currentMark;
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ê–ô–ú–§–†–ï–ô–ú–ê: {symbol} ‚Üí {currentMark:HH:mm:ss}");
                return false; // –ù–ï —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        /// </summary>
        private bool IsTimeframeCrossingCheck(string symbol)
        {
            var now = DateTime.UtcNow;
            DateTime currentMark;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ—Ç–º–µ—Ç–∫—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            if (_backendConfig.EnableFifteenSecondTrading)
            {
                var seconds = (now.Second / 15) * 15;
                currentMark = new DateTime(now.Year, now.Month, now.Day, now.Hour, now.Minute, seconds, DateTimeKind.Utc);
            }
            else
            {
                currentMark = new DateTime(now.Year, now.Month, now.Day, now.Hour, now.Minute, 0, DateTimeKind.Utc);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (_lastTimeframeMark.TryGetValue(symbol, out var lastMark))
            {
                return currentMark > lastMark;
            }
            
            return true; // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - —Ä–∞–∑—Ä–µ—à–∞–µ–º
        }

        /// <summary>
        /// –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–¥–µ–ª–∫–∏
        /// </summary>
        private string GetTradeBlockReason(string symbol)
        {
            if (!_autoTradingConfig.EnableAutoTrading)
                return "–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞";
            
            if (_activeTradingModules.Count >= _autoTradingConfig.MaxConcurrentPositions)
                return $"–ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π ({_autoTradingConfig.MaxConcurrentPositions})";
            
            if (_activeTradingModules.ContainsKey(symbol))
                return "–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞";
            
            if (_lastTradeTime.TryGetValue(symbol, out var lastTime))
            {
                var minTime = TimeSpan.FromMinutes(_autoTradingConfig.MinTimeBetweenTradesMinutes);
                var timeSince = DateTime.UtcNow - lastTime;
                if (timeSince < minTime)
                {
                    var remaining = minTime - timeSince;
                    return $"–ü–∞—É–∑–∞ –µ—â–µ {remaining.TotalMinutes:F0} –º–∏–Ω";
                }
            }
            
            var timeSinceStart = DateTime.UtcNow - _systemStartTime;
            if (timeSinceStart.TotalSeconds < 5)
                return $"–û–∂–∏–¥–∞–Ω–∏–µ {5 - (int)timeSinceStart.TotalSeconds}—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞";
            
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∏–ª–∏ —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª";
        }

        /// <summary>
        /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        /// </summary>
        private async Task RestoreStateAsync()
        {
            try
            {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                var activePositions = await _stateManager.LoadActivePositionsAsync();
                foreach (var kvp in activePositions)
                {
                    _activePositions[kvp.Key] = kvp.Value;
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {kvp.Value.Symbol} {kvp.Value.Side} ({kvp.Value.UsdAmount} USDT)");
                }

                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                var tradingState = await _stateManager.LoadTradingStateAsync();
                foreach (var kvp in tradingState)
                {
                    _lastTradeTime[kvp.Key] = kvp.Value;
                }

                if (activePositions.Count > 0 || tradingState.Count > 0)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {activePositions.Count} –ø–æ–∑–∏—Ü–∏–π, {tradingState.Count} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {ex.Message}");
                await _stateManager.LogSystemEventAsync("STATE_RESTORE_ERROR", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        /// </summary>
        private async Task SaveActivePositionAsync(string symbol, string signal, TradingConfig tradingConfig, decimal entryPrice)
        {
            try
            {
                var position = new SimpleStateManager.ActivePosition
                {
                    Symbol = symbol,
                    Side = signal == "LONG" ? "BUY" : "SELL",
                    UsdAmount = tradingConfig.UsdAmount,
                    EntryPrice = entryPrice,
                    TradingConfig = tradingConfig,
                    CreatedAt = DateTime.UtcNow
                };

                await _stateManager.SaveActivePositionAsync(position);
                _activePositions[symbol] = position;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
                await _stateManager.SaveTradingStateAsync(symbol, DateTime.UtcNow, signal);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞ –∏–∑ –∫–µ—à–∞
        /// </summary>
        private decimal GetCurrentPrice(string symbol)
        {
            var coinData = _dataStorage.GetCoinData(symbol);
            return coinData?.CurrentPrice ?? 0;
        }

        /// <summary>
        /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        /// </summary>
        private async Task SynchronizePositionsAsync()
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
                var realPositions = await _binanceDataService.GetRealPositionsAsync();
                
                // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                var localPositions = _activePositions.ToList();
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {realPositions.Count}, –ª–æ–∫–∞–ª—å–Ω—ã—Ö: {localPositions.Count}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º
                var positionsToRemove = new List<string>();
                foreach (var localPosition in localPositions)
                {
                    if (!realPositions.ContainsKey(localPosition.Key))
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üßπ –û–†–§–ê–ù–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø: {localPosition.Key} - —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
                        positionsToRemove.Add(localPosition.Key);
                    }
                    else
                    {
                        var realPos = realPositions[localPosition.Key];
                        var localPos = localPosition.Value;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        if (realPos.Side != localPos.Side)
                        {
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–¢–û–†–û–ù–´: {localPosition.Key} –õ–æ–∫–∞–ª—å–Ω–æ:{localPos.Side} vs –†–µ–∞–ª—å–Ω–æ:{realPos.Side}");
                        }
                        else
                        {
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ü–û–ó–ò–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ê: {localPosition.Key} {localPos.Side}");
                        }
                    }
                }
                
                // –£–¥–∞–ª—è–µ–º –æ—Ä—Ñ–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                foreach (var symbol in positionsToRemove)
                {
                    await _stateManager.RemoveActivePositionAsync(symbol);
                    _activePositions.TryRemove(symbol, out _);
                    
                    // –¢–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –º–æ–¥—É–ª—å –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
                    if (_activeTradingModules.TryRemove(symbol, out var module))
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ—Ä–≥–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ—Ä—Ñ–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: {symbol}");
                    }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                foreach (var realPosition in realPositions)
                {
                    if (!_activePositions.ContainsKey(realPosition.Key))
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üîç –í–ù–ï–®–ù–Ø–Ø –ü–û–ó–ò–¶–ò–Ø: {realPosition.Key} {realPosition.Value.Side} " +
                                        $"(PnL: {realPosition.Value.PnL:F2} USDT) - –æ—Ç–∫—Ä—ã—Ç–∞ –≤–Ω–µ –±–æ—Ç–∞");
                    }
                }
                
                var finalCount = _activePositions.Count;
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –±–æ—Ç–∞: {finalCount}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {ex.Message}");
                await _stateManager.LogSystemEventAsync("POSITION_SYNC_ERROR", ex.Message, ex.StackTrace);
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        /// </summary>
        public async Task StopAsync()
        {
            if (!_isRunning) return;

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...");
            _isRunning = false;

            // Timer –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–ª–∞ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ AutonomousEngine

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HFT –¥–≤–∏–∂–æ–∫
            await _hftEngine.StopAsync();

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket
            await _webSocketService.StopAsync();

            // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ (–æ–Ω–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ)
            _activeTradingModules.Clear();

            var uptime = DateTime.UtcNow - _startTime;
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.TotalHours:F1} —á–∞—Å–æ–≤");
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        /// </summary>
        public AutoTradingStats GetStats()
        {
            var uptime = _isRunning ? DateTime.UtcNow - _startTime : TimeSpan.Zero;
            
            return new AutoTradingStats
            {
                IsRunning = _isRunning,
                Uptime = uptime,
                ActivePositions = _activeTradingModules.Count,
                MaxPositions = _autoTradingConfig.MaxConcurrentPositions,
                TotalSymbolsTracked = _lastSignal.Count,
                ActiveSymbols = _activeTradingModules.Keys.ToList()
            };
        }

        private string GetSignalEmoji(string signal) => signal switch
        {
            "LONG" => "üü¢",
            "SHORT" => "üî¥",
            _ => "‚ö™"
        };
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    /// </summary>
    public class AutoTradingStats
    {
        public bool IsRunning { get; set; }
        public TimeSpan Uptime { get; set; }
        public int ActivePositions { get; set; }
        public int MaxPositions { get; set; }
        public int TotalSymbolsTracked { get; set; }
        public List<string> ActiveSymbols { get; set; } = new();
    }
}
