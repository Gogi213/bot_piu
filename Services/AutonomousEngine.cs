using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Security;
using System.Linq;
using Microsoft.Extensions.Configuration;
using Services;
using Config;
using Binance.Net.Clients;
using CryptoExchange.Net.Authentication;

namespace Services
{
    /// <summary>
    /// –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
    /// </summary>
    public class AutonomousEngine
    {
        private readonly SimpleStateManager _stateManager;
        private volatile bool _shouldRun = true;
        private volatile bool _isRunning = false;
        private int _restartAttempts = 0;
        private DateTime _lastRestart = DateTime.MinValue;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        private const int MaxRestartAttempts = 5;
        private const int RestartCooldownHours = 1;
        private readonly int[] _restartDelays = { 5, 10, 30, 60, 300 }; // —Å–µ–∫—É–Ω–¥—ã
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        private readonly string _apiKey;
        private readonly string _apiSecret;
        
        public AutonomousEngine(string apiKey, string apiSecret)
        {
            _apiKey = apiKey;
            _apiSecret = apiSecret;
            _stateManager = new SimpleStateManager();
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
        /// </summary>
        public async Task StartAsync()
        {
            if (_isRunning)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–≤–∏–∂–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
                return;
            }

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ù–û–ú–ù–û–ì–û –î–í–ò–ñ–ö–ê");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ================================");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üîÑ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–ö–õ–Æ–ß–ï–ù–û");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõ°Ô∏è –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {MaxRestartAttempts} –≤ {RestartCooldownHours} —á–∞—Å(–∞)");
            Console.WriteLine();

            _isRunning = true;
            
            // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            while (_shouldRun)
            {
                try
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    if (ShouldStopDueToRestartLimits())
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤");
                        await _stateManager.LogSystemEventAsync("AUTONOMOUS_ENGINE_STOPPED", 
                            $"Exceeded restart limits: {_restartAttempts} attempts in {RestartCooldownHours} hour(s)");
                        break;
                    }

                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üéØ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (–ø–æ–ø—ã—Ç–∫–∞ {_restartAttempts + 1})...");
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                    await RunTradingSystemAsync();
                    
                    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                    break;
                }
                catch (Exception ex)
                {
                    _restartAttempts++;
                    var isRecoverable = IsRecoverableError(ex);
                    
                    await _stateManager.LogSystemEventAsync("SYSTEM_CRASH", 
                        $"Attempt {_restartAttempts}: {ex.Message}", ex.StackTrace);

                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üí• –°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê (–ø–æ–ø—ã—Ç–∫–∞ {_restartAttempts}):");
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå {ex.Message}");
                    
                    if (!isRecoverable)
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ");
                        break;
                    }

                    if (_restartAttempts >= MaxRestartAttempts)
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ ({MaxRestartAttempts})");
                        break;
                    }

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                    var delayIndex = Math.Min(_restartAttempts - 1, _restartDelays.Length - 1);
                    var delay = _restartDelays[delayIndex];
                    
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...");
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {MaxRestartAttempts - _restartAttempts}");
                    
                    _lastRestart = DateTime.UtcNow;
                    
                    // –ñ–¥–µ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                    for (int i = delay; i > 0 && _shouldRun; i--)
                    {
                        Console.Write($"\r[{DateTime.Now:HH:mm:ss.fff}] ‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {i} —Å–µ–∫...");
                        await Task.Delay(1000);
                    }
                    Console.WriteLine();
                }
            }

            _isRunning = false;
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
        /// </summary>
        public void Stop()
        {
            _shouldRun = false;
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞...");
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        private async Task RunTradingSystemAsync()
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("config.json", optional: false, reloadOnChange: true)
                .Build();

            var tradingConfig = TradingConfig.LoadFromConfiguration(configuration);
            var backendConfig = BackendConfig.LoadFromConfiguration(configuration);
            var autoTradingConfig = AutoTradingConfig.LoadFromConfiguration(configuration);

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã Binance
            var restClient = new BinanceRestClient(options =>
            {
                options.ApiCredentials = new ApiCredentials(_apiKey, _apiSecret);
            });

            var socketClient = new BinanceSocketClient(options =>
            {
                options.ApiCredentials = new ApiCredentials(_apiKey, _apiSecret);
            });

            // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            var dataStorage = new DataStorageService();
            var binanceDataService = new BinanceDataService(restClient, backendConfig);
            
            // 15-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            FifteenSecondCandleService? fifteenSecondService = null;
            if (backendConfig.EnableFifteenSecondTrading)
            {
                fifteenSecondService = new FifteenSecondCandleService(socketClient, dataStorage, backendConfig);
            }
            
            var tradingStrategyService = new TradingStrategyService(backendConfig, fifteenSecondService);

            var universeUpdateService = new UniverseUpdateService(
                binanceDataService,
                dataStorage,
                backendConfig
            );

            var hftSignalEngine = new HftSignalEngineService(
                tradingStrategyService,
                dataStorage,
                backendConfig
            );

            var webSocketService = new MultiSymbolWebSocketService(socketClient, dataStorage, backendConfig);

            var autoTradingService = new AutoTradingService(
                hftSignalEngine,
                dataStorage,
                universeUpdateService,
                webSocketService,
                tradingStrategyService,
                backendConfig,
                tradingConfig,
                autoTradingConfig,
                restClient,
                socketClient,
                _stateManager
            );

            // –°–æ–±—ã—Ç–∏—è
            autoTradingService.OnTradeOpened += (symbol, signal) =>
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê: {symbol} {signal}");
            };

            autoTradingService.OnTradeClosed += (symbol, result) =>
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üèÅ –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê: {symbol} ({result})");
            };

            autoTradingService.OnError += (message) =>
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û–®–ò–ë–ö–ê: {message}");
            };

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Binance
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Binance...");
                var serverTimeResponse = await restClient.SpotApi.ExchangeData.GetServerTimeAsync();
                if (!serverTimeResponse.Success)
                {
                    throw new Exception($"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Binance: {serverTimeResponse.Error}");
                }
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

                // –ü–µ—Ä–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–∞—Ö
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–∞—Ö...");
                await universeUpdateService.UpdateUniverseAsync();

                // –ó–∞–ø—É—Å–∫–∞–µ–º 15s —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                if (fifteenSecondService != null)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üî• –ó–∞–ø—É—Å–∫ 15-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π...");
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –ø–æ –æ–±—ä—ë–º—É –∏ NATR
                    var filteredCoins = dataStorage.GetFilteredCoins(backendConfig.MinVolumeUsdt, backendConfig.MinNatrPercent);
                    var symbols = filteredCoins.Select(c => c.Symbol).ToList();
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –û—Ç–æ–±—Ä–∞–Ω–æ {symbols.Count} –º–æ–Ω–µ—Ç –¥–ª—è 15s –ø—Ä–æ–≥—Ä–µ–≤–∞");
                    await fifteenSecondService.StartAsync(symbols);
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º HFT –¥–≤–∏–∂–æ–∫
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö° –ó–∞–ø—É—Å–∫ HFT –¥–≤–∏–∂–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...");
                await hftSignalEngine.StartAsync();

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...");
                await autoTradingService.StartAsync();

                Console.WriteLine();
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–û–†–ì–û–í–õ–Ø –ó–ê–ü–£–©–ï–ù–ê!");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] =====================================");
                if (backendConfig.EnableFifteenSecondTrading)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üî• –†–µ–∂–∏–º: 15-–°–ï–ö–£–ù–î–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø");
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ–≤: {backendConfig.FifteenSecondWarmupCandles} —Å–≤–µ—á–µ–π");
                }
                else
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üïê –†–µ–∂–∏–º: 1-–ú–ò–ù–£–¢–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø");
                }
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç:");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä—ã–Ω–æ–∫ 24/7");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å/–∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏ –∏ –ª–∏–º–∏—Ç–∞–º–∏");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫");
                Console.WriteLine();

                // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
                _restartAttempts = 0;

                // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞ –º–æ–Ω–µ—Ç
                var updateTimer = new Timer(async _ =>
                {
                    try
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞ –º–æ–Ω–µ—Ç...");
                        await universeUpdateService.UpdateUniverseAsync();
                        
                        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
                        var filteredCoins = dataStorage.GetFilteredCoins(backendConfig.MinVolumeUsdt, backendConfig.MinNatrPercent);
                        var newSymbols = filteredCoins.Take(20).Select(c => c.Symbol).ToList(); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20

                        // –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 15s —Å–µ—Ä–≤–∏—Å–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                        if (fifteenSecondService != null)
                        {
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üî• –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 15s: {newSymbols.Count} –º–æ–Ω–µ—Ç");
                            await fifteenSecondService.UpdateSymbolsAsync(newSymbols);
                        }

                        // TODO: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WebSocket –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç
                        // (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ)
                        
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚úÖ –ü—É–ª –æ–±–Ω–æ–≤–ª–µ–Ω");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–ª–∞: {ex.Message}");
                        await _stateManager.LogSystemEventAsync("UNIVERSE_UPDATE_ERROR", ex.Message, ex.StackTrace);
                    }
                }, null, TimeSpan.Zero, TimeSpan.FromMinutes(backendConfig.UpdateIntervalMinutes));

                // –û–∂–∏–¥–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                while (_shouldRun)
                {
                    await Task.Delay(1000);
                }

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë –û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´...");

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                await updateTimer.DisposeAsync();

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...");
                await autoTradingService.StopAsync();

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HFT –¥–≤–∏–∂–∫–∞...");
                await hftSignalEngine.StopAsync();

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üí• –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: {ex.Message}");
                throw; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º –¥–≤–∏–∂–∫–µ
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        /// </summary>
        private bool IsRecoverableError(Exception ex)
        {
            var message = ex.Message.ToLower();
            
            // –ù–µ–∏—Å–ø—Ä–∞–≤–∏–º—ã–µ –æ—à–∏–±–∫–∏
            if (message.Contains("api key") || 
                message.Contains("permission") || 
                message.Contains("unauthorized") ||
                message.Contains("forbidden") ||
                ex is UnauthorizedAccessException ||
                ex is SecurityException)
            {
                return false;
            }

            // –ò—Å–ø—Ä–∞–≤–∏–º—ã–µ –æ—à–∏–±–∫–∏ (—Å–µ—Ç—å, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ API –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ç.–¥.)
            return true;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        /// </summary>
        private bool ShouldStopDueToRestartLimits()
        {
            if (_restartAttempts == 0) return false;
            
            var timeSinceLastRestart = DateTime.UtcNow - _lastRestart;
            if (timeSinceLastRestart.TotalHours >= RestartCooldownHours)
            {
                // –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                _restartAttempts = 0;
                return false;
            }

            return _restartAttempts >= MaxRestartAttempts;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
        /// </summary>
        public AutonomousEngineStats GetStats()
        {
            return new AutonomousEngineStats
            {
                IsRunning = _isRunning,
                RestartAttempts = _restartAttempts,
                LastRestart = _lastRestart == DateTime.MinValue ? null : _lastRestart,
                MaxRestartAttempts = MaxRestartAttempts,
                RestartCooldownHours = RestartCooldownHours
            };
        }
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
    /// </summary>
    public class AutonomousEngineStats
    {
        public bool IsRunning { get; set; }
        public int RestartAttempts { get; set; }
        public DateTime? LastRestart { get; set; }
        public int MaxRestartAttempts { get; set; }
        public int RestartCooldownHours { get; set; }
    }
}
