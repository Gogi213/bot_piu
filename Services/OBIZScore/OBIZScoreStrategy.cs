using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Services.OBIZScore.Core;
using Services.OBIZScore.Config;
using Services;
using Models;

namespace Services.OBIZScore
{
    /// <summary>
    /// OBIZ-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –∞–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ Order Book —Å Z-Score –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    /// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –±–æ—Ç–∞
    /// </summary>
    public partial class OBIZScoreStrategy
    {
        private readonly OBIZStrategyConfig _config;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        private readonly CircularBuffer<TickData> _tickHistory;
        private readonly CircularBuffer<decimal> _priceHistory;
        private readonly CircularBuffer<long> _volumeHistory;
        private readonly CircularBuffer<decimal> _imbalanceHistory;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        private readonly RollingStatistics _imbalanceStats;
        private readonly RollingStatistics _activityStats;
        
        // VWAP —Ä–∞—Å—á–µ—Ç—ã
        private decimal _currentVWAP;
        private long _vwapVolume;
        private decimal _vwapSum;
        
        // –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        private decimal _lastOBIZScore;
        private decimal _lastActivityScore;
        private decimal _lastEfficiencyRatio;
        private decimal _lastVWAPDeviation;
        private MarketRegime _currentRegime;
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π
        private readonly PositionManager _positionManager;
        

        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã
        private int _ticksProcessed;
        private DateTime _lastUpdate;
        private readonly List<OBIZSignal> _signalHistory;

        public OBIZScoreStrategy(OBIZStrategyConfig config)
        {
            _config = config ?? throw new ArgumentNullException(nameof(config));
            _config.Validate();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–æ–≤
            _tickHistory = new CircularBuffer<TickData>(_config.MaxHistorySize);
            _priceHistory = new CircularBuffer<decimal>(_config.MaxHistorySize);
            _volumeHistory = new CircularBuffer<long>(_config.MaxHistorySize);
            _imbalanceHistory = new CircularBuffer<decimal>(_config.MaxHistorySize);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
            _imbalanceStats = new RollingStatistics(_config.ZScoreWindow);
            _activityStats = new RollingStatistics(_config.ActivityWindow);
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π
            _positionManager = new PositionManager();
            
            // –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            _signalHistory = new List<OBIZSignal>();
            
            _lastUpdate = DateTime.UtcNow;
            
            LogInfo($"OBIZ Strategy initialized: {_config}");
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–∞ - –≤—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        /// </summary>
        public async Task<TradingDecision> ProcessTickAsync(TickData tick, string symbol)
        {
            try
            {
                _ticksProcessed++;
                _lastUpdate = DateTime.UtcNow;
                
                LogDebug($"üîÑ {symbol} | TICK #{_ticksProcessed} | Price: {tick.Price:F4} | Volume: {tick.Volume}");
                
                // 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                UpdateHistory(tick);
                LogDebug($"üìä {symbol} | HISTORY | Buffer size: {_tickHistory.Count}/{_config.MaxHistorySize}");
                
                // 2. –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
                UpdateMetrics(tick);
                LogDebug($"üß† {symbol} | METRICS", new Dictionary<string, object>
                {
                    ["symbol"] = symbol,
                    ["obizScore"] = _lastOBIZScore,
                    ["activityScore"] = _lastActivityScore,
                    ["efficiencyRatio"] = _lastEfficiencyRatio,
                    ["vwapDeviation"] = _lastVWAPDeviation,
                    ["marketRegime"] = _currentRegime.ToString(),
                    ["ticksProcessed"] = _ticksProcessed
                });
                
                // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                if (_positionManager.IsOpen)
                {
                    LogDebug($"üíº {symbol} | POSITION OPEN | Managing existing position");
                    return await ManageOpenPositionAsync(tick, symbol);
                }
                
                // 4. –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –≤—Ö–æ–¥
                LogDebug($"üéØ {symbol} | SIGNAL CHECK | Looking for entry signals...");
                var signal = await CheckEntryConditionsAsync(tick, symbol);
                if (signal.HasValue)
                {
                    LogInfo($"üöÄ {symbol} | SIGNAL GENERATED", new Dictionary<string, object>
                    {
                        ["symbol"] = symbol,
                        ["direction"] = signal.Value.Direction.ToString(),
                        ["confidence"] = signal.Value.Confidence.ToString(),
                        ["obizScore"] = signal.Value.OBIZScore,
                        ["entryPrice"] = signal.Value.EntryPrice,
                        ["takeProfitPrice"] = signal.Value.TPPrice,
                        ["stopLossPrice"] = signal.Value.SLPrice,
                        ["timestamp"] = DateTime.UtcNow
                    });
                    return new TradingDecision 
                    { 
                        Action = TradingAction.OpenPosition,
                        Signal = signal.Value 
                    };
                }
                else
                {
                    LogDebug($"‚ùå {symbol} | NO SIGNAL | No entry conditions met");
                }
                
                return TradingDecision.NoAction;
            }
            catch (Exception ex)
            {
                LogError($"Error processing tick for {symbol}: {ex.Message}");
                return TradingDecision.NoAction;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ VWAP
        /// </summary>
        private void UpdateHistory(TickData tick)
        {
            _tickHistory.Add(tick);
            
            // –†–∞—Å—á–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
            decimal weightedMidPrice = CalculateWeightedMidPrice(tick);
            _priceHistory.Add(weightedMidPrice);
            _volumeHistory.Add(tick.Volume);
            
            // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ VWAP
            _vwapSum += weightedMidPrice * tick.Volume;
            _vwapVolume += tick.Volume;
            
            if (_vwapVolume > 0)
            {
                _currentVWAP = _vwapSum / _vwapVolume;
            }
            
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å VWAP –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º
            if (_ticksProcessed % _config.VWAPResetPeriod == 0)
            {
                _vwapSum = 0;
                _vwapVolume = 0;
            }
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        /// </summary>
        private void UpdateMetrics(TickData tick)
        {
            if (_tickHistory.Count < _config.MinHistoryForCalculation)
                return;
                
            // 1. –†–∞—Å—á–µ—Ç OBI Z-Score
            _lastOBIZScore = CalculateOBIZScore(tick);
            
            // 2. –†–∞—Å—á–µ—Ç Activity Score
            _lastActivityScore = CalculateActivityScore();
            
            // 3. –†–∞—Å—á–µ—Ç Efficiency Ratio
            _lastEfficiencyRatio = CalculateEfficiencyRatio();
            
            // 4. –†–∞—Å—á–µ—Ç VWAP Deviation
            _lastVWAPDeviation = CalculateVWAPDeviation(tick);
            
            // 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
            _currentRegime = DetermineMarketRegime();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
            _imbalanceStats.Add(_lastOBIZScore);
            _activityStats.Add(_lastActivityScore);
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç Order Book Imbalance Z-Score
        /// </summary>
        private decimal CalculateOBIZScore(TickData tick)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Order Book –¥–∞–Ω–Ω—ã—Ö
            if (tick.Bids?.Length < _config.OrderBookDepth || 
                tick.Asks?.Length < _config.OrderBookDepth)
            {
                return 0;
            }
            
            // –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –Ω–∞ N —É—Ä–æ–≤–Ω—è—Ö
            int levels = Math.Min(_config.OrderBookDepth, tick.Bids.Length);
            levels = Math.Min(levels, tick.Asks.Length);
            
            long buyVolume = tick.Bids.Take(levels).Sum(b => b.Size);
            long sellVolume = tick.Asks.Take(levels).Sum(a => a.Size);
            long totalVolume = buyVolume + sellVolume;
            
            if (totalVolume == 0) return 0;
            
            // Order Book Imbalance: (Buy - Sell) / Total
            decimal imbalance = (decimal)(buyVolume - sellVolume) / totalVolume;
            _imbalanceHistory.Add(imbalance);
            
            // Z-Score –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            if (_imbalanceHistory.Count < _config.ZScoreWindow)
                return 0;
                
            var recentImbalances = _imbalanceHistory.TakeLast(_config.ZScoreWindow);
            decimal mean = recentImbalances.Average();
            decimal stdDev = CalculateStandardDeviation(recentImbalances, mean);
            
            return stdDev > _config.MinVolatility ? (imbalance - mean) / stdDev : 0;
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç Activity Score (Realized Volatility * Volume)
        /// </summary>
        private decimal CalculateActivityScore()
        {
            int window = Math.Min(_config.ActivityWindow, _priceHistory.Count);
            if (window < 10) return 0;
            
            var recentPrices = _priceHistory.TakeLast(window).ToArray();
            
            // Realized Volatility
            decimal realizedVol = 0;
            for (int i = 1; i < recentPrices.Length; i++)
            {
                realizedVol += Math.Abs(recentPrices[i] - recentPrices[i-1]);
            }
            
            // –°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥
            long totalVolume = _volumeHistory.TakeLast(window).Sum();
            
            // Activity Score = RV * Volume
            return realizedVol * totalVolume;
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç Efficiency Ratio (—á–∏—Å—Ç–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ / –æ–±—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
        /// </summary>
        private decimal CalculateEfficiencyRatio()
        {
            int window = Math.Min(_config.EfficiencyWindow, _priceHistory.Count);
            if (window < 10) return 0.5m; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
            var recentPrices = _priceHistory.TakeLast(window).ToArray();
            
            // –ß–∏—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            decimal netChange = Math.Abs(recentPrices[^1] - recentPrices[0]);
            
            // –û–±—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (—Å—É–º–º–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            decimal totalMovement = 0;
            for (int i = 1; i < recentPrices.Length; i++)
            {
                totalMovement += Math.Abs(recentPrices[i] - recentPrices[i-1]);
            }
            
            return totalMovement > _config.MinVolatility ? netChange / totalMovement : 0.5m;
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç VWAP
        /// </summary>
        private decimal CalculateVWAPDeviation(TickData tick)
        {
            if (_vwapVolume == 0) return 0;
            
            decimal currentPrice = CalculateWeightedMidPrice(tick);
            decimal deviation = currentPrice - _currentVWAP;
            
            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            decimal currentVolatility = CalculateCurrentVolatility();
            
            return currentVolatility > _config.MinVolatility ? 
                deviation / currentVolatility : 0;
        }

        /// <summary>
        /// –†–∞—Å—á–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–ø—Ä–µ–¥–∞
        /// </summary>
        private decimal CalculateWeightedMidPrice(TickData tick)
        {
            if (tick.BidSize + tick.AskSize == 0)
                return (tick.BestBid + tick.BestAsk) / 2;
                
            // –í–∑–≤–µ—à–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º –æ–±—ä–µ–º–∞–º
            return (tick.BestBid * tick.AskSize + tick.BestAsk * tick.BidSize) / 
                   (tick.BidSize + tick.AskSize);
        }

        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ Efficiency Ratio
        /// </summary>
        private MarketRegime DetermineMarketRegime()
        {
            if (_lastEfficiencyRatio < _config.ChoppyThreshold)
                return MarketRegime.Choppy;
            else if (_lastEfficiencyRatio > _config.TrendingThreshold)
                return MarketRegime.Trending;
            else
                return MarketRegime.Mixed;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
        /// </summary>
        private async Task<OBIZSignal?> CheckEntryConditionsAsync(TickData tick, string symbol)
        {
            LogDebug($"üîç {symbol} | ENTRY CHECK START");
            
            // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            LogDebug($"üìè {symbol} | STEP 1 | ZScore check: {Math.Abs(_lastOBIZScore):F3} vs {_config.ZScoreThreshold}");
            if (Math.Abs(_lastOBIZScore) < _config.ZScoreThreshold)
            {
                LogDebug($"‚ùå {symbol} | STEP 1 FAILED | ZScore too low");
                return null;
            }
            LogDebug($"‚úÖ {symbol} | STEP 1 PASSED | ZScore sufficient");
                
            LogDebug($"‚ö° {symbol} | STEP 2 | Activity check");
            if (!IsHighActivityPeriod())
            {
                LogDebug($"‚ùå {symbol} | STEP 2 FAILED | Low activity period");
                return null;
            }
            LogDebug($"‚úÖ {symbol} | STEP 2 PASSED | High activity period");
                
            LogDebug($"üè™ {symbol} | STEP 3 | Market conditions check");
            if (!IsGoodMarketConditions(tick))
            {
                LogDebug($"‚ùå {symbol} | STEP 3 FAILED | Poor market conditions");
                return null;
            }
            LogDebug($"‚úÖ {symbol} | STEP 3 PASSED | Good market conditions");
            
            // –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
            LogDebug($"üéØ {symbol} | STEP 4 | Market regime strategy: {_currentRegime}");
            var signal = _currentRegime switch
            {
                MarketRegime.Choppy => CheckMeanReversionEntry(tick, symbol),
                MarketRegime.Trending => CheckMomentumEntry(tick, symbol),
                MarketRegime.Mixed => CheckConservativeEntry(tick, symbol),
                _ => null
            };
            
            if (signal.HasValue)
            {
                LogDebug($"‚úÖ {symbol} | STEP 4 PASSED | {_currentRegime} strategy generated signal");
            }
            else
            {
                LogDebug($"‚ùå {symbol} | STEP 4 FAILED | {_currentRegime} strategy no signal");
            }
            
            return signal;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        /// </summary>
        private bool IsHighActivityPeriod()
        {
            if (!_activityStats.HasSufficientData(_config.MinSamplesForPercentile))
            {
                LogDebug($"‚ö° ACTIVITY | Insufficient data: {_activityStats.Count} < {_config.MinSamplesForPercentile} | ALLOWING");
                return true; // –í –Ω–∞—á–∞–ª–µ —Ç–æ—Ä–≥—É–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
            }
                
            decimal threshold = _activityStats.GetPercentile(_config.ActivityPercentileThreshold);
            bool result = _lastActivityScore >= threshold;
            LogDebug($"‚ö° ACTIVITY | Result: {(result ? "PASS" : "FAIL")}", new Dictionary<string, object>
            {
                ["activityScore"] = _lastActivityScore,
                ["threshold"] = threshold,
                ["result"] = result,
                ["samplesCount"] = _activityStats.Count
            });
            return result;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        /// </summary>
        private bool IsGoodMarketConditions(TickData tick)
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–º–∞ –≤ Order Book (—Å–ø—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä —É–±—Ä–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
            long totalBookVolume = (tick.BidSize + tick.AskSize);
            
            LogDebug($"üè™ MARKET CONDITIONS", new Dictionary<string, object>
            {
                ["totalBookVolume"] = totalBookVolume,
                ["minRequiredVolume"] = _config.MinOrderBookVolume,
                ["volumeValid"] = totalBookVolume >= _config.MinOrderBookVolume
            });
            
            if (totalBookVolume < _config.MinOrderBookVolume)
            {
                return false;
            }
                
            return true;
        }

        /// <summary>
        /// Mean Reversion –≤—Ö–æ–¥ (–¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞)
        /// </summary>
        private OBIZSignal? CheckMeanReversionEntry(TickData tick, string symbol)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å VWAP deviation –∏ OBI
            if (_lastVWAPDeviation * _lastOBIZScore >= 0)
                return null;
                
            // –¢—Ä–µ–±—É–µ–º —Å–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å + –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç VWAP
            if (Math.Abs(_lastVWAPDeviation) > _config.VWAPDeviationThreshold && 
                Math.Abs(_lastOBIZScore) > _config.StrongZScoreThreshold)
            {
                var direction = _lastOBIZScore > 0 ? TradeDirection.Sell : TradeDirection.Buy;
                return CreateSignal(direction, SignalConfidence.High, tick, symbol);
            }
            
            return null;
        }

        /// <summary>
        /// Momentum –≤—Ö–æ–¥ (–¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞)
        /// </summary>
        private OBIZSignal? CheckMomentumEntry(TickData tick, string symbol)
        {
            // –î–ª—è momentum —Ç—Ä–µ–±—É–µ–º –µ—â–µ –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if (Math.Abs(_lastOBIZScore) < _config.StrongZScoreThreshold * 1.5m)
                return null;
                
            // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –¥–∏—Å–±–∞–ª–∞–Ω—Å—É (momentum)
            var direction = _lastOBIZScore < 0 ? TradeDirection.Buy : TradeDirection.Sell;
            return CreateSignal(direction, SignalConfidence.Medium, tick, symbol);
        }

        /// <summary>
        /// –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ (–¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        /// </summary>
        private OBIZSignal? CheckConservativeEntry(TickData tick, string symbol)
        {
            // –¢—Ä–µ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π
            if (Math.Abs(_lastOBIZScore) < _config.StrongZScoreThreshold ||
                Math.Abs(_lastVWAPDeviation) < _config.VWAPDeviationThreshold)
                return null;
                
            // –ü—Ä–æ—Ç–∏–≤–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
            if (_lastVWAPDeviation * _lastOBIZScore >= 0)
                return null;
                
            var direction = _lastOBIZScore > 0 ? TradeDirection.Sell : TradeDirection.Buy;
            return CreateSignal(direction, SignalConfidence.Low, tick, symbol);
        }

        // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∞–π–ª–µ...
        
        private decimal GetTickSize()
        {
            // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –±–∏—Ä–∂–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            return 0.00001m;
        }

        private decimal CalculateStandardDeviation(IEnumerable<decimal> values, decimal mean)
        {
            var variance = values.Select(x => (x - mean) * (x - mean)).Average();
            return (decimal)Math.Sqrt((double)variance);
        }

        private decimal CalculateCurrentVolatility()
        {
            int window = Math.Min(50, _priceHistory.Count);
            if (window < 5) return _config.MinVolatility;
            
            var recentPrices = _priceHistory.TakeLast(window);
            return recentPrices.Zip(recentPrices.Skip(1), (a, b) => Math.Abs(b - a)).Average();
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∞–π–ª–µ...
        
        private void LogInfo(string message, Dictionary<string, object>? data = null)
        {
            OBIZJsonLogger.Info("OBIZ_STRATEGY", message, data);
        }

        private void LogDebug(string message, Dictionary<string, object>? data = null)
        {
            if (_config.EnableDetailedLogging)
            {
                OBIZJsonLogger.Debug("OBIZ_STRATEGY", message, data);
            }
        }

        private void LogError(string message, Dictionary<string, object>? data = null)
        {
            OBIZJsonLogger.Error("OBIZ_STRATEGY", message, data);
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫ —Ä–∞–±–æ—Ç–µ
        /// </summary>
        public bool IsReady()
        {
            return _tickHistory.Count >= _config.MinHistoryForCalculation &&
                   _imbalanceStats.Count >= _config.MinSamplesForPercentile;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        public OBIZStrategyStats GetCurrentStats()
        {
            return new OBIZStrategyStats
            {
                CurrentOBIZScore = _lastOBIZScore,
                CurrentActivityScore = _lastActivityScore,
                CurrentEfficiencyRatio = _lastEfficiencyRatio,
                CurrentVWAPDeviation = _lastVWAPDeviation,
                CurrentRegime = _currentRegime,
                TicksProcessed = _ticksProcessed,
                LastUpdate = _lastUpdate,
                HasSufficientData = _tickHistory.Count >= _config.MinHistoryForCalculation
            };
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ TP/SL
        /// </summary>
        private OBIZSignal CreateSignal(TradeDirection direction, SignalConfidence confidence, TickData tick, string symbol)
        {
            decimal currentPrice = CalculateWeightedMidPrice(tick);
            decimal currentVol = CalculateCurrentVolatility();
            decimal avgVol = GetAverageVolatility();
            
            // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            decimal volMultiplier = avgVol > 0 ? currentVol / avgVol : 1.0m;
            volMultiplier = Math.Max(volMultiplier, _config.MinVolatilityMultiplier);
            volMultiplier = Math.Min(volMultiplier, _config.MaxVolatilityMultiplier);
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            decimal confidenceMultiplier = confidence switch
            {
                SignalConfidence.High => 1.2m,
                SignalConfidence.Medium => 1.0m,
                SignalConfidence.Low => 0.8m,
                _ => 1.0m
            };
            
            decimal tpRatio = _config.BaseTakeProfit * volMultiplier * confidenceMultiplier;
            decimal slRatio = _config.BaseStopLoss * volMultiplier;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π RR
            if (tpRatio / slRatio < _config.MinRiskReward)
            {
                tpRatio = slRatio * _config.MinRiskReward;
            }
            
            decimal tpPrice, slPrice;
            
            if (direction == TradeDirection.Buy)
            {
                tpPrice = currentPrice * (1 + tpRatio);
                slPrice = currentPrice * (1 - slRatio);
            }
            else
            {
                tpPrice = currentPrice * (1 - tpRatio);
                slPrice = currentPrice * (1 + slRatio);
            }
            
            var signal = new OBIZSignal
            {
                Direction = direction,
                Confidence = confidence,
                EntryPrice = currentPrice,
                TPPrice = tpPrice,
                SLPrice = slPrice,
                Timestamp = DateTime.UtcNow,
                OBIZScore = _lastOBIZScore,
                ActivityScore = _lastActivityScore,
                EfficiencyRatio = _lastEfficiencyRatio,
                VWAPDeviation = _lastVWAPDeviation,
                Regime = _currentRegime
            };
            
            if (_config.SaveSignalHistory)
            {
                _signalHistory.Add(signal);
                if (_signalHistory.Count > 1000)
                {
                    _signalHistory.RemoveRange(0, 500);
                }
            }
            
            return signal;
        }

        /// <summary>
        /// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
        /// </summary>
        private async Task<TradingDecision> ManageOpenPositionAsync(TickData tick, string symbol)
        {
            decimal currentPrice = CalculateWeightedMidPrice(tick);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Stop Loss
            if (_positionManager.ShouldStopLoss(currentPrice))
            {
                return new TradingDecision { Action = TradingAction.ClosePosition };
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Take Profit
            if (_positionManager.ShouldTakeProfit(currentPrice))
            {
                return new TradingDecision { Action = TradingAction.ClosePosition };
            }
            
            // –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            decimal pnlRatio = _positionManager.GetPnLRatio(currentPrice);
            if (pnlRatio >= _config.PartialCloseRatio)
            {
                return new TradingDecision 
                { 
                    Action = TradingAction.PartialClose,
                    Percentage = 0.5m 
                };
            }
            
            // Time-based exit
            if (_positionManager.GetHoldingTimeSeconds() > _config.MaxHoldTimeSeconds)
            {
                return new TradingDecision { Action = TradingAction.ClosePosition };
            }
            
            return TradingDecision.NoAction;
        }

        private decimal GetAverageVolatility()
        {
            int window = Math.Min(500, _priceHistory.Count);
            if (window < 10) return _config.MinVolatility;
            
            decimal totalVol = 0;
            var prices = _priceHistory.TakeLast(window).ToArray();
            
            for (int i = 1; i < prices.Length; i++)
            {
                totalVol += Math.Abs(prices[i] - prices[i-1]);
            }
            
            return totalVol / (prices.Length - 1);
        }
    }
}
