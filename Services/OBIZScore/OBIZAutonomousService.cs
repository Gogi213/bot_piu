using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using Services.OBIZScore.Core;
using Services.OBIZScore.Config;
using Models;
using Config;
using Binance.Net.Clients;

namespace Services.OBIZScore
{
    /// <summary>
    /// –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å OBIZ-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    /// –û—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å, –Ω–µ –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç Legacy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    /// </summary>
    public class OBIZAutonomousService
    {
        private readonly OBIZStrategyConfig _obizConfig;
        private readonly BackendConfig _backendConfig;
        private readonly TradingConfig _tradingConfig;
        private readonly AutoTradingConfig _autoConfig;
        private readonly CoinSelectionConfig _coinSelectionConfig;
        
        // OBIZ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        private readonly ConcurrentDictionary<string, OBIZScoreStrategy> _strategies;
        private readonly OBIZPositionManager _positionManager;
        private readonly TickDataAdapter _tickAdapter;
        
        // –î–∞–Ω–Ω—ã–µ –∏ —Å–µ—Ä–≤–∏—Å—ã
        private readonly DataStorageService _dataStorage;
        private readonly BinanceDataService _binanceService;
        private readonly CoinSelectionService _coinSelectionService;
        
        // WebSocket –¥–ª—è —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã—Ö
        private readonly MultiSymbolWebSocketService _webSocketService;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        private volatile bool _isRunning = false;
        private readonly Timer _analysisTimer;
        private readonly Timer _positionUpdateTimer;
        private List<string> _activeSymbols = new List<string>();
        
        // –°–æ–±—ã—Ç–∏—è
        public event Action<string, OBIZSignal>? OnOBIZSignal;
        public event Action<string, string>? OnPositionOpened;
        public event Action<string, string>? OnPositionClosed;
        public event Action<string>? OnError;

        public OBIZAutonomousService(
            OBIZStrategyConfig obizConfig,
            BackendConfig backendConfig,
            TradingConfig tradingConfig,
            AutoTradingConfig autoConfig,
            CoinSelectionConfig coinSelectionConfig,
            DataStorageService dataStorage,
            BinanceDataService binanceService,
            CoinSelectionService coinSelectionService,
            MultiSymbolWebSocketService webSocketService)
        {
            _obizConfig = obizConfig ?? throw new ArgumentNullException(nameof(obizConfig));
            _backendConfig = backendConfig ?? throw new ArgumentNullException(nameof(backendConfig));
            _tradingConfig = tradingConfig ?? throw new ArgumentNullException(nameof(tradingConfig));
            _autoConfig = autoConfig ?? throw new ArgumentNullException(nameof(autoConfig));
            _coinSelectionConfig = coinSelectionConfig ?? throw new ArgumentNullException(nameof(coinSelectionConfig));
            
            _dataStorage = dataStorage ?? throw new ArgumentNullException(nameof(dataStorage));
            _binanceService = binanceService ?? throw new ArgumentNullException(nameof(binanceService));
            _coinSelectionService = coinSelectionService ?? throw new ArgumentNullException(nameof(coinSelectionService));
            _webSocketService = webSocketService ?? throw new ArgumentNullException(nameof(webSocketService));
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OBIZ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            _strategies = new ConcurrentDictionary<string, OBIZScoreStrategy>();
            _positionManager = new OBIZPositionManager(_obizConfig, _autoConfig, _tradingConfig);
            _tickAdapter = new TickDataAdapter();
            
            // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
            _analysisTimer = new Timer(AnalysisCallback, null, Timeout.Infinite, Timeout.Infinite);
            _positionUpdateTimer = new Timer(PositionUpdateCallback, null, Timeout.Infinite, Timeout.Infinite);
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ OBIZ —Å–µ—Ä–≤–∏—Å–∞
        /// </summary>
        public async Task<bool> StartAsync()
        {
            if (_isRunning)
            {
                LogWarning("OBIZ service already running");
                return false;
            }

            try
            {
                // –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                OBIZJsonLogger.RotateLogFile();
                
                LogInfo("üöÄ Starting OBIZ Autonomous Service...");
                LogInfo($"Configuration: {_obizConfig}");

                // 1. –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–µ—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                LogInfo("üìä Selecting coins for OBIZ trading...");
                var coinSelection = await _coinSelectionService.GetTradingCoinsAsync();
                if (!coinSelection.Success)
                {
                    LogError($"Failed to select coins: {coinSelection.ErrorMessage}");
                    return false;
                }

                _activeSymbols = coinSelection.SelectedCoins.Select(c => c.Symbol).ToList();
                LogInfo($"‚úÖ Selected {_activeSymbols.Count} coins: {coinSelection.SelectionCriteria}");

                // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OBIZ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                LogInfo("üß† Initializing OBIZ strategies...");
                foreach (var symbol in _activeSymbols)
                {
                    var strategy = new OBIZScoreStrategy(_obizConfig);
                    _strategies[symbol] = strategy;
                    
                    // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    await WarmupStrategyAsync(strategy, symbol);
                }
                LogInfo($"‚úÖ Initialized {_strategies.Count} OBIZ strategies");

                // 3. –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –¥–ª—è —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã—Ö
                LogInfo("üì° Starting WebSocket for real-time data...");
                await _webSocketService.StartAsync(_activeSymbols);
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
                _webSocketService.OnPriceUpdate += OnPriceUpdateHandler;
                LogInfo("‚úÖ WebSocket started and subscribed to price updates");

                // 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
                LogInfo("‚ö° Starting analysis timers...");
                _analysisTimer.Change(TimeSpan.Zero, TimeSpan.FromMilliseconds(500)); // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 500ms
                _positionUpdateTimer.Change(TimeSpan.Zero, TimeSpan.FromSeconds(1)); // –ü–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                
                _isRunning = true;
                LogInfo("üéØ OBIZ Autonomous Service started successfully!");
                return true;
            }
            catch (Exception ex)
            {
                LogError($"Failed to start OBIZ service: {ex.Message}");
                OnError?.Invoke(ex.Message);
                return false;
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
        /// </summary>
        public async Task StopAsync()
        {
            if (!_isRunning) return;

            LogInfo("üõë Stopping OBIZ Autonomous Service...");
            
            _isRunning = false;
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            _analysisTimer.Change(Timeout.Infinite, Timeout.Infinite);
            _positionUpdateTimer.Change(Timeout.Infinite, Timeout.Infinite);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket
            await _webSocketService.StopAsync();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            await CloseAllPositionsAsync("Service stopping");
            
            LogInfo("‚úÖ OBIZ Autonomous Service stopped");
        }

        /// <summary>
        /// –ü—Ä–æ–≥—Ä–µ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        /// </summary>
        private async Task WarmupStrategyAsync(OBIZScoreStrategy strategy, string symbol)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏
                var candles = await _binanceService.GetHistoricalCandlesAsync(symbol, 100);
                if (candles.Count == 0)
                {
                    LogWarning($"No historical data for {symbol}");
                    return;
                }

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º
                int ticksGenerated = 0;
                foreach (var candle in candles.TakeLast(50)) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π
                {
                    var ticks = _tickAdapter.ConvertCandleToTicks(candle, symbol, 3); // 3 —Ç–∏–∫–∞ –Ω–∞ —Å–≤–µ—á—É
                    foreach (var tick in ticks)
                    {
                        await strategy.ProcessTickAsync(tick, symbol);
                        ticksGenerated++;
                    }
                }

                var stats = strategy.GetCurrentStats();
                LogInfo($"üìà {symbol} warmed up: {ticksGenerated} ticks, Ready: {stats.HasSufficientData}");
            }
            catch (Exception ex)
            {
                LogError($"Error warming up {symbol}: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω –æ—Ç WebSocket
        /// </summary>
        private async void OnPriceUpdateHandler(string symbol, decimal price)
        {
            if (!_isRunning || !_strategies.ContainsKey(symbol)) return;

            try
            {
                // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫ –∏–∑ —Ä–µ–∞–ª-—Ç–∞–π–º –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–º—ã–π –æ–±—ä–µ–º)
                var coinData = _dataStorage.GetCoinData(symbol);
                var volume = coinData?.Volume24h ?? 0m;
                var tick = _tickAdapter.CreateRealTimeTick(symbol, price, volume);
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é OBIZ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                var strategy = _strategies[symbol];
                var decision = await strategy.ProcessTickAsync(tick, symbol);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
                await ProcessTradingDecisionAsync(symbol, decision);
            }
            catch (Exception ex)
            {
                LogError($"Error processing price update for {symbol}: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        /// </summary>
        private async Task ProcessTradingDecisionAsync(string symbol, TradingDecision decision)
        {
            try
            {
                LogInfo($"üîÑ Processing trading decision for {symbol}: {decision.Action}");
                
                switch (decision.Action)
                {
                    case TradingAction.OpenPosition:
                        if (decision.Signal.HasValue)
                        {
                            LogInfo($"üìà Attempting to open position for {symbol}");
                            await ProcessOpenPositionAsync(symbol, decision.Signal.Value);
                        }
                        else
                        {
                            LogWarning($"‚ùå Open position signal is null for {symbol}");
                        }
                        break;

                    case TradingAction.ClosePosition:
                        LogInfo($"üìâ Attempting to close position for {symbol}");
                        await ProcessClosePositionAsync(symbol, "Strategy signal");
                        break;

                    case TradingAction.PartialClose:
                        LogInfo($"üìä Attempting partial close for {symbol} at {decision.Percentage:P}");
                        await ProcessPartialCloseAsync(symbol, decision.Percentage);
                        break;
                        
                    case TradingAction.NoAction:
                        // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º NoAction –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤
                        break;
                        
                    default:
                        LogWarning($"‚ùì Unknown trading action: {decision.Action} for {symbol}");
                        break;
                }
            }
            catch (Exception ex)
            {
                LogError($"Error processing trading decision for {symbol}: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        /// </summary>
        private async Task ProcessOpenPositionAsync(string symbol, OBIZSignal signal)
        {
            if (!_autoConfig.EnableAutoTrading) return;

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è
                if (!_positionManager.CanOpenPosition(symbol, signal))
                {
                    return;
                }

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                var openResult = await _positionManager.OpenPositionAsync(symbol, signal);
                if (openResult.Success)
                {
                    LogInfo($"üéØ Position opened: {openResult.Symbol} {openResult.Direction} at {openResult.EntryPrice:F4}");
                    OnPositionOpened?.Invoke(symbol, signal.Direction.ToString());
                    OnOBIZSignal?.Invoke(symbol, signal);
                }
                else
                {
                    LogWarning($"Failed to open position for {symbol}: {openResult.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                LogError($"Error opening position for {symbol}: {ex.Message}");
            }
        }

        /// <summary>
        /// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        /// </summary>
        private async Task ProcessClosePositionAsync(string symbol, string reason)
        {
            try
            {
                var coinData = _dataStorage.GetCoinData(symbol);
                if (coinData == null) return;

                var closeResult = await _positionManager.ClosePositionAsync(symbol, coinData.CurrentPrice, reason);
                if (closeResult.Success)
                {
                    LogInfo($"üèÅ Position closed: {closeResult.Symbol} | PnL: {closeResult.PnLPercent:F2}% | Reason: {reason}");
                    OnPositionClosed?.Invoke(symbol, $"PnL: {closeResult.PnLPercent:F2}%");
                }
            }
            catch (Exception ex)
            {
                LogError($"Error closing position for {symbol}: {ex.Message}");
            }
        }

        /// <summary>
        /// –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        /// </summary>
        private async Task ProcessPartialCloseAsync(string symbol, decimal percentage)
        {
            try
            {
                var coinData = _dataStorage.GetCoinData(symbol);
                if (coinData == null) return;

                var partialResult = await _positionManager.PartialClosePositionAsync(symbol, coinData.CurrentPrice, percentage);
                if (partialResult.Success)
                {
                    LogInfo($"üìä Partial close: {partialResult.Symbol} {percentage:P0} | PnL: {partialResult.PnLPercent:F2}%");
                }
            }
            catch (Exception ex)
            {
                LogError($"Error partial closing position for {symbol}: {ex.Message}");
            }
        }

        /// <summary>
        /// Callback –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–∂–¥—ã–µ 500ms)
        /// </summary>
        private void AnalysisCallback(object? state)
        {
            if (!_isRunning) return;

            Task.Run(async () =>
            {
                try
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                    foreach (var (symbol, strategy) in _strategies)
                    {
                        var stats = strategy.GetCurrentStats();
                        
                        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                        if (_obizConfig.EnableDetailedLogging && DateTime.UtcNow.Second % 10 == 0)
                        {
                            LogInfo($"üìä {symbol}: OBIZ={stats.CurrentOBIZScore:F2}, Activity={stats.CurrentActivityScore:F2}, Regime={stats.CurrentRegime}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    LogError($"Error in analysis callback: {ex.Message}");
                }
            });
        }

        /// <summary>
        /// Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
        /// </summary>
        private void PositionUpdateCallback(object? state)
        {
            if (!_isRunning) return;

            Task.Run(async () =>
            {
                try
                {
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
                    var currentPrices = new Dictionary<string, decimal>();
                    foreach (var symbol in _activeSymbols)
                    {
                        var coinData = _dataStorage.GetCoinData(symbol);
                        if (coinData != null)
                        {
                            currentPrices[symbol] = coinData.CurrentPrice;
                        }
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
                    var updateResults = await _positionManager.UpdateAllPositionsAsync(currentPrices);
                    
                    foreach (var result in updateResults.Where(r => r.ActionTaken))
                    {
                        LogInfo($"üìà Position update: {result.Symbol} - {result.Action}");
                    }
                }
                catch (Exception ex)
                {
                    LogError($"Error in position update callback: {ex.Message}");
                }
            });
        }

        /// <summary>
        /// –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
        /// </summary>
        private async Task CloseAllPositionsAsync(string reason)
        {
            try
            {
                var currentPrices = new Dictionary<string, decimal>();
                foreach (var symbol in _activeSymbols)
                {
                    var coinData = _dataStorage.GetCoinData(symbol);
                    if (coinData != null)
                    {
                        currentPrices[symbol] = coinData.CurrentPrice;
                    }
                }

                var openPositions = _positionManager.GetAllPositions(currentPrices);
                foreach (var position in openPositions)
                {
                    await ProcessClosePositionAsync(position.Symbol, reason);
                }
            }
            catch (Exception ex)
            {
                LogError($"Error closing all positions: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
        /// </summary>
        public OBIZServiceStats GetStats()
        {
            var currentPrices = new Dictionary<string, decimal>();
            foreach (var symbol in _activeSymbols)
            {
                var coinData = _dataStorage.GetCoinData(symbol);
                if (coinData != null)
                {
                    currentPrices[symbol] = coinData.CurrentPrice;
                }
            }

            return new OBIZServiceStats
            {
                IsRunning = _isRunning,
                ActiveSymbols = _activeSymbols.Count,
                ActiveStrategies = _strategies.Count,
                PositionStats = _positionManager.GetStatistics(),
                OpenPositions = _positionManager.GetAllPositions(currentPrices)
            };
        }

        public void Dispose()
        {
            _analysisTimer?.Dispose();
            _positionUpdateTimer?.Dispose();
        }

        private void LogInfo(string message)
        {
            Console.WriteLine($"[{DateTime.UtcNow:HH:mm:ss.fff}] OBIZ_SERVICE: {message}");
        }

        private void LogWarning(string message)
        {
            Console.WriteLine($"[{DateTime.UtcNow:HH:mm:ss.fff}] OBIZ_SERVICE WARNING: {message}");
        }

        private void LogError(string message)
        {
            Console.WriteLine($"[{DateTime.UtcNow:HH:mm:ss.fff}] OBIZ_SERVICE ERROR: {message}");
            OnError?.Invoke(message);
        }
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OBIZ —Å–µ—Ä–≤–∏—Å–∞
    /// </summary>
    public class OBIZServiceStats
    {
        public bool IsRunning { get; set; }
        public int ActiveSymbols { get; set; }
        public int ActiveStrategies { get; set; }
        public PositionStatistics PositionStats { get; set; } = new();
        public List<PositionInfo> OpenPositions { get; set; } = new();
    }
}
