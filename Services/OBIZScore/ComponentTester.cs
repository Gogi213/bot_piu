using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using Services.OBIZScore.Core;
using Services.OBIZScore.Config;
using Models;
using Binance.Net.Clients;
using CryptoExchange.Net.Authentication;
using static Services.OBIZScore.Core.TradeDirection;

namespace Services.OBIZScore
{
    /// <summary>
    /// –¢–µ—Å—Ç–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OBIZ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    /// </summary>
    public class ComponentTester : IDisposable
    {
        private readonly BinanceRestClient _restClient;
        private readonly BinanceSocketClient _socketClient;
        private readonly OBIZStrategyConfig _config;

        public ComponentTester()
        {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
            _restClient = new BinanceRestClient();
            _socketClient = new BinanceSocketClient();
            
            // –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            _config = new OBIZStrategyConfig
            {
                ZScoreThreshold = 2.0m,
                StrongZScoreThreshold = 2.5m,
                ZScoreWindow = 50,
                ActivityWindow = 100,
                OrderBookDepth = 10,
                EnableDetailedLogging = true
            };
        }

        /// <summary>
        /// –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Trades)
        /// </summary>
        public async Task<bool> TestTradesAsync(string symbol = "ETHUSDT")
        {
            Console.WriteLine("üîÑ –¢–ï–°–¢ TRADES DATA");
            Console.WriteLine("==================");
            
            try
            {
                Console.WriteLine($"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è {symbol}...");
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–π–¥—ã
                var tradesResponse = await _restClient.SpotApi.ExchangeData.GetRecentTradesAsync(symbol, 100);
                
                if (!tradesResponse.Success)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤: {tradesResponse.Error}");
                    return false;
                }

                var trades = tradesResponse.Data.ToList();
                Console.WriteLine($"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {trades.Count} —Ç—Ä–µ–π–¥–æ–≤");

                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–π–¥—ã
                var buyTrades = trades.Where(t => !t.BuyerIsMaker).ToList();
                var sellTrades = trades.Where(t => t.BuyerIsMaker).ToList();
                
                var totalVolume = trades.Sum(t => t.BaseQuantity);
                var buyVolume = buyTrades.Sum(t => t.BaseQuantity);
                var sellVolume = sellTrades.Sum(t => t.BaseQuantity);
                
                var avgPrice = trades.Average(t => t.Price);
                var priceRange = trades.Max(t => t.Price) - trades.Min(t => t.Price);
                
                Console.WriteLine("üìà –ê–ù–ê–õ–ò–ó –¢–†–ï–ô–î–û–í:");
                Console.WriteLine($"   –û–±—â–∏–π –æ–±—ä–µ–º: {totalVolume:F2}");
                Console.WriteLine($"   Buy –æ–±—ä–µ–º: {buyVolume:F2} ({buyVolume/totalVolume:P1})");
                Console.WriteLine($"   Sell –æ–±—ä–µ–º: {sellVolume:F2} ({sellVolume/totalVolume:P1})");
                Console.WriteLine($"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avgPrice:F4}");
                Console.WriteLine($"   –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {priceRange:F4}");
                Console.WriteLine($"   Buy/Sell ratio: {(buyVolume/sellVolume):F2}");

                // –°–∏–º—É–ª–∏—Ä—É–µ–º OBIZ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ç—Ä–µ–π–¥–æ–≤
                var imbalance = (buyVolume - sellVolume) / totalVolume;
                var activity = totalVolume;
                
                Console.WriteLine("üß† OBIZ –ú–ï–¢–†–ò–ö–ò:");
                Console.WriteLine($"   Trade Imbalance: {imbalance:F4} ({(imbalance > 0 ? "Buy pressure" : "Sell pressure")})");
                Console.WriteLine($"   Activity Score: {activity:F2}");

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç Order Book –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public async Task<bool> TestOrderBookAsync(string symbol = "ETHUSDT")
        {
            Console.WriteLine("\nüîÑ –¢–ï–°–¢ ORDER BOOK DATA");
            Console.WriteLine("=======================");
            
            try
            {
                Console.WriteLine($"üìä –ó–∞–≥—Ä—É–∑–∫–∞ Order Book –¥–ª—è {symbol} (–≥–ª—É–±–∏–Ω–∞: {_config.OrderBookDepth})...");
                
                // –ü–æ–ª—É—á–∞–µ–º Order Book
                var orderBookResponse = await _restClient.SpotApi.ExchangeData.GetOrderBookAsync(symbol, _config.OrderBookDepth);
                
                if (!orderBookResponse.Success)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Order Book: {orderBookResponse.Error}");
                    return false;
                }

                var orderBook = orderBookResponse.Data;
                Console.WriteLine($"‚úÖ –ü–æ–ª—É—á–µ–Ω Order Book: {orderBook.Bids.Count()} bids, {orderBook.Asks.Count()} asks");

                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Order Book
                var bids = orderBook.Bids.Take(_config.OrderBookDepth).ToList();
                var asks = orderBook.Asks.Take(_config.OrderBookDepth).ToList();
                
                var totalBidVolume = bids.Sum(b => b.Quantity);
                var totalAskVolume = asks.Sum(a => a.Quantity);
                var totalVolume = totalBidVolume + totalAskVolume;
                
                var bestBid = bids.First().Price;
                var bestAsk = asks.First().Price;
                var spread = bestAsk - bestBid;
                var midPrice = (bestBid + bestAsk) / 2;
                
                // –í—ã—á–∏—Å–ª—è–µ–º OBIZ Score (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                var imbalance = (totalBidVolume - totalAskVolume) / totalVolume;
                var obizScore = imbalance * 10; // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                
                Console.WriteLine("üìà ORDER BOOK –ê–ù–ê–õ–ò–ó:");
                Console.WriteLine($"   Best Bid: {bestBid:F4}");
                Console.WriteLine($"   Best Ask: {bestAsk:F4}");
                Console.WriteLine($"   Spread: {spread:F4} ({spread/midPrice:P3})");
                Console.WriteLine($"   Mid Price: {midPrice:F4}");
                Console.WriteLine();
                Console.WriteLine($"   Total Bid Volume: {totalBidVolume:F2}");
                Console.WriteLine($"   Total Ask Volume: {totalAskVolume:F2}");
                Console.WriteLine($"   Volume Ratio: {totalBidVolume/totalAskVolume:F2}");
                
                Console.WriteLine("üß† OBIZ –ú–ï–¢–†–ò–ö–ò:");
                Console.WriteLine($"   Order Book Imbalance: {imbalance:F4}");
                Console.WriteLine($"   OBIZ Score: {obizScore:F2}");
                Console.WriteLine($"   –°–∏–≥–Ω–∞–ª: {(Math.Abs(obizScore) > _config.ZScoreThreshold ? (obizScore > 0 ? "BUY" : "SELL") : "FLAT")}");

                // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
                Console.WriteLine("\nüìä –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –£–†–û–í–ù–Ø–ú:");
                Console.WriteLine("BIDS:");
                for (int i = 0; i < Math.Min(5, bids.Count); i++)
                {
                    var bid = bids[i];
                    var distance = (midPrice - bid.Price) / midPrice;
                    Console.WriteLine($"   {i+1}. {bid.Price:F4} | {bid.Quantity:F2} | {distance:P3}");
                }
                
                Console.WriteLine("ASKS:");
                for (int i = 0; i < Math.Min(5, asks.Count); i++)
                {
                    var ask = asks[i];
                    var distance = (ask.Price - midPrice) / midPrice;
                    Console.WriteLine($"   {i+1}. {ask.Price:F4} | {ask.Quantity:F2} | {distance:P3}");
                }

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Order Book: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        /// </summary>
        public async Task<bool> TestWebSocketAsync(string symbol = "ETHUSDT", int durationSeconds = 30)
        {
            Console.WriteLine("\nüîÑ –¢–ï–°–¢ WEBSOCKET CONNECTIONS");
            Console.WriteLine("=============================");
            
            try
            {
                Console.WriteLine($"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...");
                Console.WriteLine($"‚è±Ô∏è –¢–µ—Å—Ç –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è {durationSeconds} —Å–µ–∫—É–Ω–¥");
                
                var priceUpdates = 0;
                var tradeUpdates = 0;
                var orderBookUpdates = 0;
                
                var lastPrice = 0m;
                var priceChanges = new List<decimal>();
                
                // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü–µ–Ω—ã (ticker)
                var priceSubscription = await _socketClient.SpotApi.ExchangeData.SubscribeToTickerUpdatesAsync(symbol, data =>
                {
                    priceUpdates++;
                    if (lastPrice > 0)
                    {
                        var change = data.Data.LastPrice - lastPrice;
                        priceChanges.Add(change);
                    }
                    lastPrice = data.Data.LastPrice;
                    
                    if (priceUpdates % 10 == 0)
                    {
                        Console.WriteLine($"üí∞ Price Update #{priceUpdates}: {data.Data.LastPrice:F4}");
                    }
                });

                if (!priceSubscription.Success)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ü–µ–Ω—ã: {priceSubscription.Error}");
                    return false;
                }

                // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—Ä–µ–π–¥—ã
                var tradeSubscription = await _socketClient.SpotApi.ExchangeData.SubscribeToTradeUpdatesAsync(symbol, data =>
                {
                    tradeUpdates++;
                    if (tradeUpdates % 5 == 0)
                    {
                        var direction = data.Data.BuyerIsMaker ? "SELL" : "BUY";
                        Console.WriteLine($"üìà Trade #{tradeUpdates}: {direction} {data.Data.Quantity:F2} @ {data.Data.Price:F4}");
                    }
                });

                if (!tradeSubscription.Success)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç—Ä–µ–π–¥—ã: {tradeSubscription.Error}");
                    await priceSubscription.Data.CloseAsync();
                    return false;
                }

                // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Order Book
                var orderBookSubscription = await _socketClient.SpotApi.ExchangeData.SubscribeToOrderBookUpdatesAsync(symbol, 100, data =>
                {
                    orderBookUpdates++;
                    if (orderBookUpdates % 20 == 0)
                    {
                        var bestBid = data.Data.Bids.FirstOrDefault()?.Price ?? 0;
                        var bestAsk = data.Data.Asks.FirstOrDefault()?.Price ?? 0;
                        var spread = bestAsk - bestBid;
                        Console.WriteLine($"üìä OrderBook #{orderBookUpdates}: Spread {spread:F4}");
                    }
                });

                if (!orderBookSubscription.Success)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Order Book: {orderBookSubscription.Error}");
                    await priceSubscription.Data.CloseAsync();
                    await tradeSubscription.Data.CloseAsync();
                    return false;
                }

                Console.WriteLine("‚úÖ –í—Å–µ WebSocket –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã!");
                Console.WriteLine("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...");

                // –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                var startTime = DateTime.UtcNow;
                while ((DateTime.UtcNow - startTime).TotalSeconds < durationSeconds)
                {
                    await Task.Delay(5000);
                    var elapsed = (DateTime.UtcNow - startTime).TotalSeconds;
                    Console.WriteLine($"‚è±Ô∏è {elapsed:F0}s | Prices: {priceUpdates}, Trades: {tradeUpdates}, OrderBook: {orderBookUpdates}");
                }

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                await priceSubscription.Data.CloseAsync();
                await tradeSubscription.Data.CloseAsync();
                await orderBookSubscription.Data.CloseAsync();

                // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                Console.WriteLine("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ WEBSOCKET –¢–ï–°–¢–ê:");
                Console.WriteLine($"   –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: {priceUpdates}");
                Console.WriteLine($"   –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤: {tradeUpdates}");
                Console.WriteLine($"   –û–±–Ω–æ–≤–ª–µ–Ω–∏—è Order Book: {orderBookUpdates}");
                Console.WriteLine($"   –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω: {priceUpdates/durationSeconds:F1} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫");
                Console.WriteLine($"   –°–∫–æ—Ä–æ—Å—Ç—å —Ç—Ä–µ–π–¥–æ–≤: {tradeUpdates/durationSeconds:F1} —Ç—Ä–µ–π–¥–æ–≤/—Å–µ–∫");
                Console.WriteLine($"   –°–∫–æ—Ä–æ—Å—Ç—å Order Book: {orderBookUpdates/durationSeconds:F1} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫");

                if (priceChanges.Count > 0)
                {
                    var avgChange = priceChanges.Average();
                    var maxChange = priceChanges.Max();
                    var minChange = priceChanges.Min();
                    Console.WriteLine($"   –°—Ä–µ–¥–Ω–∏–π —Ç–∏–∫: {avgChange:F6}");
                    Console.WriteLine($"   –ú–∞–∫—Å —Ç–∏–∫: {maxChange:F6}");
                    Console.WriteLine($"   –ú–∏–Ω —Ç–∏–∫: {minChange:F6}");
                }

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        /// </summary>
        public async Task<bool> TestIntegrationAsync(string symbol = "ETHUSDT")
        {
            Console.WriteLine("\nüîÑ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í");
            Console.WriteLine("==============================");
            
            try
            {
                Console.WriteLine("üß† –°–æ–∑–¥–∞–Ω–∏–µ OBIZ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...");
                var strategy = new OBIZScoreStrategy(_config);
                
                Console.WriteLine("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
                
                // –ü–æ–ª—É—á–∞–µ–º Order Book
                var orderBookResponse = await _restClient.SpotApi.ExchangeData.GetOrderBookAsync(symbol, _config.OrderBookDepth);
                if (!orderBookResponse.Success)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Order Book: {orderBookResponse.Error}");
                    return false;
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–¥—ã
                var tradesResponse = await _restClient.SpotApi.ExchangeData.GetRecentTradesAsync(symbol, 50);
                if (!tradesResponse.Success)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤: {tradesResponse.Error}");
                    return false;
                }

                var trades = tradesResponse.Data.ToList();
                var orderBook = orderBookResponse.Data;
                
                Console.WriteLine("üîÑ –°–∏–º—É–ª—è—Ü–∏—è —Ç–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...");
                
                // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∏–∫–∞–º–∏
                for (int i = 0; i < 100; i++)
                {
                    var trade = trades[i % trades.Count];
                    var tick = new TickData
                    {
                        Timestamp = DateTime.UtcNow.AddMilliseconds(-i * 100),
                        Price = trade.Price,
                        Volume = (long)trade.BaseQuantity,
                        BestBid = trade.Price * 0.9999m, // –°–∏–º—É–ª—è—Ü–∏—è bid
                        BestAsk = trade.Price * 1.0001m, // –°–∏–º—É–ª—è—Ü–∏—è ask
                        BidSize = 1000,
                        AskSize = 1000,
                        Direction = trade.BuyerIsMaker ? TradeDirection.Sell : TradeDirection.Buy,
                        Bids = new OrderBookLevel[]
                        {
                            new OrderBookLevel { Price = trade.Price * 0.9999m, Size = 1000 },
                            new OrderBookLevel { Price = trade.Price * 0.9998m, Size = 500 },
                            new OrderBookLevel { Price = trade.Price * 0.9997m, Size = 300 }
                        },
                        Asks = new OrderBookLevel[]
                        {
                            new OrderBookLevel { Price = trade.Price * 1.0001m, Size = 1200 },
                            new OrderBookLevel { Price = trade.Price * 1.0002m, Size = 800 },
                            new OrderBookLevel { Price = trade.Price * 1.0003m, Size = 400 }
                        }
                    };

                    var decision = await strategy.ProcessTickAsync(tick, symbol);
                    
                    if (i % 20 == 0)
                    {
                        var stats = strategy.GetCurrentStats();
                        Console.WriteLine($"üìà –¢–∏–∫ {i+1}: OBIZ={stats.CurrentOBIZScore:F2}, Activity={stats.CurrentActivityScore:F2}, –†–µ–∂–∏–º={stats.CurrentRegime}");
                    }
                }

                var finalStats = strategy.GetCurrentStats();
                Console.WriteLine("\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:");
                Console.WriteLine($"   OBIZ Score: {finalStats.CurrentOBIZScore:F2}");
                Console.WriteLine($"   Activity Score: {finalStats.CurrentActivityScore:F2}");
                Console.WriteLine($"   Efficiency Ratio: {finalStats.CurrentEfficiencyRatio:F2}");
                Console.WriteLine($"   VWAP Deviation: {finalStats.CurrentVWAPDeviation:F2}");
                Console.WriteLine($"   Market Regime: {finalStats.CurrentRegime}");
                Console.WriteLine($"   –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {(finalStats.HasSufficientData ? "‚úÖ" : "‚ùå")}");
                Console.WriteLine($"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∏–∫–æ–≤: {finalStats.TicksProcessed}");

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"üí• –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        /// </summary>
        public async Task RunAllTestsAsync(string symbol = "ETHUSDT")
        {
            Console.WriteLine("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø OBIZ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í");
            Console.WriteLine("===============================================");
            Console.WriteLine($"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–∏–º–≤–æ–ª: {symbol}");
            Console.WriteLine($"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {_config}");
            Console.WriteLine();

            var results = new Dictionary<string, bool>();

            // –¢–µ—Å—Ç —Ç—Ä–µ–π–¥–æ–≤
            results["Trades"] = await TestTradesAsync(symbol);
            
            // –¢–µ—Å—Ç Order Book
            results["OrderBook"] = await TestOrderBookAsync(symbol);
            
            // –¢–µ—Å—Ç WebSocket (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
            results["WebSocket"] = await TestWebSocketAsync(symbol, 15);
            
            // –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            results["Integration"] = await TestIntegrationAsync(symbol);

            // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            Console.WriteLine("\nüèÅ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø");
            Console.WriteLine("===================================");
            
            foreach (var result in results)
            {
                var status = result.Value ? "‚úÖ –£–°–ü–ï–•" : "‚ùå –û–®–ò–ë–ö–ê";
                Console.WriteLine($"   {result.Key}: {status}");
            }

            var successCount = results.Values.Count(r => r);
            var totalCount = results.Count;
            
            Console.WriteLine($"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {successCount}/{totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ");
            
            if (successCount == totalCount)
            {
                Console.WriteLine("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ OBIZ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!");
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö");
            }
        }

        public void Dispose()
        {
            _restClient?.Dispose();
            _socketClient?.Dispose();
        }
    }
}
