using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Services.OBIZScore.Core;
using Services.OBIZScore.Config;
using Models;
using Config;

namespace Services.OBIZScore
{
    /// <summary>
    /// –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OBIZ-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    /// </summary>
    public class OBIZIntegrationTest
    {
        private readonly OBIZStrategyConfig _obizConfig;
        private readonly StrategyConfig _strategyConfig;
        private readonly AutoTradingConfig _autoConfig;
        private readonly TradingConfig _tradingConfig;

        public OBIZIntegrationTest()
        {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            _obizConfig = new OBIZStrategyConfig
            {
                ZScoreThreshold = 1.5m, // –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                StrongZScoreThreshold = 2.0m,
                VWAPDeviationThreshold = 1.0m,
                ZScoreWindow = 50, // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                ActivityWindow = 100,
                EfficiencyWindow = 25,
                BaseTakeProfit = 0.002m,
                BaseStopLoss = 0.001m,
                MaxHoldTimeSeconds = 120, // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                EnableDetailedLogging = true,
                SaveSignalHistory = true
            };

            _strategyConfig = new StrategyConfig
            {
                EnableLegacyStrategies = true,
                EnableOBIZStrategy = true,
                Mode = StrategyMode.Combined
            };

            _autoConfig = new AutoTradingConfig
            {
                MaxConcurrentPositions = 3,
                MinTimeBetweenTradesMinutes = 0,
                EnableAutoTrading = true
            };

            _tradingConfig = new TradingConfig
            {
                UsdAmount = 100m,
                TakeProfitPercent = 2.0m,
                StopLossPercent = 1.0m
            };
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        /// </summary>
        public async Task<TestResults> RunFullIntegrationTestAsync()
        {
            var results = new TestResults();
            
            try
            {
                Console.WriteLine("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OBIZ-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...\n");

                // 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                results.BasicComponentsTest = await TestBasicComponentsAsync();
                
                // 2. –¢–µ—Å—Ç —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                results.TickDataTest = await TestTickDataGenerationAsync();
                
                // 3. –¢–µ—Å—Ç OBIZ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                results.OBIZStrategyTest = await TestOBIZStrategyAsync();
                
                // 4. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                results.IntegratedServiceTest = await TestIntegratedServiceAsync();
                
                // 5. –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
                results.PositionManagementTest = await TestPositionManagementAsync();

                results.OverallSuccess = results.BasicComponentsTest && 
                                       results.TickDataTest && 
                                       results.OBIZStrategyTest && 
                                       results.IntegratedServiceTest && 
                                       results.PositionManagementTest;

                Console.WriteLine($"\nüìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {(results.OverallSuccess ? "‚úÖ –£–°–ü–ï–•" : "‚ùå –û–®–ò–ë–ö–ê")}");
                
                return results;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {ex.Message}");
                results.ErrorMessage = ex.Message;
                return results;
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        /// </summary>
        private async Task<bool> TestBasicComponentsAsync()
        {
            Console.WriteLine("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");
            
            try
            {
                // –¢–µ—Å—Ç CircularBuffer
                var buffer = new CircularBuffer<decimal>(5);
                for (int i = 1; i <= 10; i++)
                {
                    buffer.Add(i);
                }
                
                if (buffer.Count != 5 || buffer.Last() != 10)
                {
                    Console.WriteLine("‚ùå CircularBuffer –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                    return false;
                }

                // –¢–µ—Å—Ç RollingStatistics
                var stats = new RollingStatistics(10);
                for (int i = 1; i <= 20; i++)
                {
                    stats.Add(i);
                }
                
                if (stats.Count != 10 || Math.Abs(stats.Mean - 15.5m) > 0.1m)
                {
                    Console.WriteLine("‚ùå RollingStatistics –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                    return false;
                }

                // –¢–µ—Å—Ç PositionManager
                var position = new PositionManager();
                var testSignal = new OBIZSignal
                {
                    Direction = TradeDirection.Buy,
                    EntryPrice = 100m,
                    TPPrice = 102m,
                    SLPrice = 99m,
                    Confidence = SignalConfidence.High
                };
                
                position.Open(testSignal, 1m, "TESTUSDT");
                
                if (!position.IsOpen || position.EntryPrice != 100m)
                {
                    Console.WriteLine("‚ùå PositionManager –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                    return false;
                }

                Console.WriteLine("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        private async Task<bool> TestTickDataGenerationAsync()
        {
            Console.WriteLine("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
            
            try
            {
                var adapter = new TickDataAdapter();
                
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–≤–µ—á—É
                var testCandle = new CandleData
                {
                    OpenTime = DateTime.UtcNow,
                    Open = 100m,
                    High = 102m,
                    Low = 98m,
                    Close = 101m,
                    Volume = 1000
                };

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–∫–∏
                var ticks = adapter.ConvertCandleToTicks(testCandle, "TESTUSDT", 10);
                
                if (ticks.Count != 10)
                {
                    Console.WriteLine($"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤: {ticks.Count} –≤–º–µ—Å—Ç–æ 10");
                    return false;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                bool hasValidOrderBook = ticks.All(t => t.Bids?.Length > 0 && t.Asks?.Length > 0);
                bool hasValidPrices = ticks.All(t => t.Price > 0 && t.BestBid > 0 && t.BestAsk > 0);
                bool hasValidVolumes = ticks.All(t => t.Volume > 0);

                if (!hasValidOrderBook || !hasValidPrices || !hasValidVolumes)
                {
                    Console.WriteLine("‚ùå –ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ");
                    return false;
                }

                Console.WriteLine($"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {ticks.Count} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∏–∫–æ–≤");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç OBIZ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        /// </summary>
        private async Task<bool> TestOBIZStrategyAsync()
        {
            Console.WriteLine("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OBIZ-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...");
            
            try
            {
                var strategy = new OBIZScoreStrategy(_obizConfig);
                var adapter = new TickDataAdapter();
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
                var testCandles = GenerateTestCandles(100); // 100 —Å–≤–µ—á–µ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                var allTicks = new List<TickData>();

                foreach (var candle in testCandles)
                {
                    var ticks = adapter.ConvertCandleToTicks(candle, "TESTUSDT", 5);
                    allTicks.AddRange(ticks);
                }

                Console.WriteLine($"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {allTicks.Count} —Ç–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");

                // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                var signalCount = 0;
                var lastDecision = TradingDecision.NoAction;

                foreach (var tick in allTicks)
                {
                    var decision = await strategy.ProcessTickAsync(tick, "TESTUSDT");
                    
                    if (decision.Signal.HasValue)
                    {
                        signalCount++;
                        lastDecision = decision;
                        
                        var signal = decision.Signal.Value;
                        Console.WriteLine($"üìà –°–∏–≥–Ω–∞–ª #{signalCount}: {signal.Direction} | " +
                                        $"Confidence: {signal.Confidence} | " +
                                        $"OBIZ Score: {signal.OBIZScore:F2} | " +
                                        $"Regime: {signal.Regime}");
                    }
                }

                var stats = strategy.GetCurrentStats();
                
                Console.WriteLine($"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:");
                Console.WriteLine($"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∏–∫–æ–≤: {stats.TicksProcessed}");
                Console.WriteLine($"   –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {stats.HasSufficientData}");
                Console.WriteLine($"   –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {signalCount}");
                Console.WriteLine($"   –¢–µ–∫—É—â–∏–π OBIZ Score: {stats.CurrentOBIZScore:F2}");
                Console.WriteLine($"   –†–µ–∂–∏–º —Ä—ã–Ω–∫–∞: {stats.CurrentRegime}");

                if (!stats.HasSufficientData)
                {
                    Console.WriteLine("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –ø–æ–ª—É—á–∏–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö");
                    return false;
                }

                Console.WriteLine("‚úÖ OBIZ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ OBIZ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        /// </summary>
        private async Task<bool> TestIntegratedServiceAsync()
        {
            Console.WriteLine("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...");
            
            try
            {
                // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è legacy —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                var legacyStrategy = new MockTradingStrategyService();
                
                var integratedService = new IntegratedStrategyService(
                    legacyStrategy, 
                    _obizConfig, 
                    _strategyConfig);

                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç
                var testCoins = GenerateTestCoins(5);

                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
                var results = await integratedService.AnalyzeAllCoinsAsync(testCoins);
                
                if (results.Count != testCoins.Count)
                {
                    Console.WriteLine($"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results.Count} –≤–º–µ—Å—Ç–æ {testCoins.Count}");
                    return false;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                var activeSignals = await integratedService.GetActiveSignalsAsync(testCoins);
                
                Console.WriteLine($"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:");
                Console.WriteLine($"   –ú–æ–Ω–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results.Count}");
                Console.WriteLine($"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {activeSignals.Count}");
                
                foreach (var result in results)
                {
                    Console.WriteLine($"   {result.Symbol}: {result.FinalSignal} | " +
                                    $"OBIZ: {result.OBIZScore:F2} | " +
                                    $"Z-Score: {result.ZScore:F2}");
                }

                Console.WriteLine("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
        /// </summary>
        private async Task<bool> TestPositionManagementAsync()
        {
            Console.WriteLine("5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏...");
            
            try
            {
                var positionManager = new OBIZPositionManager(_obizConfig, _autoConfig, _tradingConfig);
                
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                var testSignal = new OBIZSignal
                {
                    Direction = TradeDirection.Buy,
                    EntryPrice = 100m,
                    TPPrice = 102m,
                    SLPrice = 99m,
                    Confidence = SignalConfidence.High,
                    OBIZScore = 2.5m
                };

                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                var openResult = await positionManager.OpenPositionAsync("TESTUSDT", testSignal);
                
                if (!openResult.Success)
                {
                    Console.WriteLine($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {openResult.ErrorMessage}");
                    return false;
                }

                Console.WriteLine($"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {openResult.Symbol} | " +
                                $"–†–∞–∑–º–µ—Ä: {openResult.PositionSize:F4} | " +
                                $"–í—Ö–æ–¥: {openResult.EntryPrice:F4}");

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö
                var positions = positionManager.GetAllPositions(new Dictionary<string, decimal> 
                { 
                    ["TESTUSDT"] = 101m 
                });

                if (positions.Count != 1)
                {
                    Console.WriteLine($"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {positions.Count}");
                    return false;
                }

                var position = positions[0];
                Console.WriteLine($"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏:");
                Console.WriteLine($"   PnL: {position.PnLPercent:F2}%");
                Console.WriteLine($"   –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {position.HoldingTimeMinutes:F1} –º–∏–Ω");

                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
                var updateResults = await positionManager.UpdateAllPositionsAsync(new Dictionary<string, decimal> 
                { 
                    ["TESTUSDT"] = 102.5m // –¶–µ–Ω–∞ –≤—ã—à–µ TP
                });

                if (updateResults.Count != 1 || updateResults[0].Action != "TAKE_PROFIT")
                {
                    Console.WriteLine($"‚ùå Take Profit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                    return false;
                }

                Console.WriteLine("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
        /// </summary>
        private List<CandleData> GenerateTestCandles(int count)
        {
            var candles = new List<CandleData>();
            var random = new Random();
            decimal basePrice = 100m;
            var timestamp = DateTime.UtcNow.AddMinutes(-count * 15); // 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏

            for (int i = 0; i < count; i++)
            {
                decimal volatility = 0.02m; // 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                decimal change = (decimal)(random.NextDouble() - 0.5) * volatility * basePrice;
                
                decimal open = basePrice;
                decimal close = basePrice + change;
                decimal high = Math.Max(open, close) * (1 + (decimal)random.NextDouble() * 0.01m);
                decimal low = Math.Min(open, close) * (1 - (decimal)random.NextDouble() * 0.01m);

                candles.Add(new CandleData
                {
                    OpenTime = timestamp.AddMinutes(i * 15),
                    Open = open,
                    High = high,
                    Low = low,
                    Close = close,
                    Volume = 1000 + random.Next(500)
                });

                basePrice = close; // –°–ª–µ–¥—É—é—â–∞—è —Å–≤–µ—á–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            }

            return candles;
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–Ω–µ—Ç
        /// </summary>
        private List<CoinData> GenerateTestCoins(int count)
        {
            var coins = new List<CoinData>();
            var symbols = new[] { "BTCUSDT", "ETHUSDT", "ADAUSDT", "DOTUSDT", "LINKUSDT" };

            for (int i = 0; i < Math.Min(count, symbols.Length); i++)
            {
                var candles = GenerateTestCandles(50);
                
                coins.Add(new CoinData
                {
                    Symbol = symbols[i],
                    CurrentPrice = candles.Last().Close,
                    Volume24h = 1000000,
                    Natr = 0.6m,
                    RecentCandles = candles
                });
            }

            return coins;
        }
    }

    /// <summary>
    /// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è legacy —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
    /// </summary>
    public class MockTradingStrategyService : TradingStrategyService
    {
        public MockTradingStrategyService() : base(new BackendConfig(), null)
        {
        }

        public new StrategyResult AnalyzeCoin(CoinData coinData)
        {
            var random = new Random();
            var signals = new[] { "LONG", "SHORT", "FLAT" };
            var signal = signals[random.Next(signals.Length)];

            return new StrategyResult
            {
                Symbol = coinData.Symbol,
                CurrentPrice = coinData.CurrentPrice,
                ZScore = (decimal)(random.NextDouble() * 4 - 2), // -2 –¥–æ 2
                ZScoreSignal = signal,
                Sma = coinData.CurrentPrice * 0.99m,
                SmaSignal = signal,
                FinalSignal = signal,
                Reason = "Mock test signal",
                Timestamp = DateTime.UtcNow
            };
        }
    }

    /// <summary>
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    /// </summary>
    public class TestResults
    {
        public bool BasicComponentsTest { get; set; }
        public bool TickDataTest { get; set; }
        public bool OBIZStrategyTest { get; set; }
        public bool IntegratedServiceTest { get; set; }
        public bool PositionManagementTest { get; set; }
        public bool OverallSuccess { get; set; }
        public string ErrorMessage { get; set; } = string.Empty;
    }
}
