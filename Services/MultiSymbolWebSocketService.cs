using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Concurrent;
using Binance.Net.Clients;
using Binance.Net.Objects.Models.Futures.Socket;
using CryptoExchange.Net.Sockets;
using Models;
using Config;

namespace Services
{
    public class MultiSymbolWebSocketService
    {
        private readonly BinanceSocketClient _socketClient;
        private readonly DataStorageService _dataStorage;
        private readonly BackendConfig _config;
        
        private readonly ConcurrentDictionary<string, UpdateSubscription> _priceSubscriptions = new();
        private readonly ConcurrentDictionary<string, UpdateSubscription> _candleSubscriptions = new();
        
        private bool _isRunning = false;
        private DateTime _startTime;

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        public event Action<string, decimal>? OnPriceUpdate;
        public event Action<string, CandleData>? OnCandleUpdate;
        public event Action<string, decimal?>? OnNatrUpdate;
        
        public MultiSymbolWebSocketService(
            BinanceSocketClient socketClient, 
            DataStorageService dataStorage, 
            BackendConfig config)
        {
            _socketClient = socketClient;
            _dataStorage = dataStorage;
            _config = config;
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
        /// </summary>
        public async Task<bool> StartAsync(List<string> symbols)
        {
            if (_isRunning)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è WebSocket —Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
                return false;
            }

            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è {symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤...");
                _startTime = DateTime.UtcNow;

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω (—Ç–∏–∫–µ—Ä—ã)
                var priceResult = await SubscribeToPricesAsync(symbols);
                if (!priceResult)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ü–µ–Ω—ã");
                    return false;
                }

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–≤–µ—á–∏ 1m
                var candleResult = await SubscribeToCandlesAsync(symbols);
                if (!candleResult)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–≤–µ—á–∏");
                    await StopAsync(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    return false;
                }

                _isRunning = true;
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ WebSocket –∑–∞–ø—É—â–µ–Ω –¥–ª—è {symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: —Ü–µ–Ω—ã={_priceSubscriptions.Count}, —Å–≤–µ—á–∏={_candleSubscriptions.Count}");
                
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket: {ex.Message}");
                await StopAsync();
                return false;
            }
        }

        /// <summary>
        /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
        /// </summary>
        private async Task<bool> SubscribeToPricesAsync(List<string> symbols)
        {
            try
            {
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                var batchSize = 20;
                var successCount = 0;

                for (int i = 0; i < symbols.Count; i += batchSize)
                {
                    var batch = symbols.Skip(i).Take(batchSize).ToList();
                    
                    var subscription = await _socketClient.UsdFuturesApi.SubscribeToTickerUpdatesAsync(
                        batch,
                        (update) =>
                        {
                            var symbol = update.Data.Symbol;
                            var price = update.Data.LastPrice;
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                            var coinData = _dataStorage.GetCoinData(symbol);
                            if (coinData != null)
                            {
                                coinData.CurrentPrice = price;
                                coinData.LastUpdated = DateTime.UtcNow;
                                _dataStorage.UpdateCoinData(symbol, coinData);
                            }

                            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                            OnPriceUpdate?.Invoke(symbol, price);
                        });

                    if (subscription.Success)
                    {
                        foreach (var symbol in batch)
                        {
                            _priceSubscriptions[symbol] = subscription.Data;
                        }
                        successCount += batch.Count;
                    }
                    else
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ü–µ–Ω—ã –¥–ª—è –ø–∞–∫–µ—Ç–∞: {subscription.Error}");
                    }

                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                    await Task.Delay(100);
                }

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìà –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü–µ–Ω—ã: {successCount}/{symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤");
                return successCount > 0;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ü–µ–Ω—ã: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π
        /// </summary>
        private async Task<bool> SubscribeToCandlesAsync(List<string> symbols)
        {
            try
            {
                var batchSize = 20;
                var successCount = 0;

                for (int i = 0; i < symbols.Count; i += batchSize)
                {
                    var batch = symbols.Skip(i).Take(batchSize).ToList();
                    
                    var subscription = await _socketClient.UsdFuturesApi.SubscribeToKlineUpdatesAsync(
                        batch,
                        Binance.Net.Enums.KlineInterval.OneMinute,
                        (update) =>
                        {
                            var klineData = update.Data.Data;
                            
                            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏
                            if (!klineData.Final)
                                return;

                            var symbol = update.Data.Symbol; // –°–∏–º–≤–æ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ update.Data.Symbol, –∞ –Ω–µ –≤ klineData
                            var newCandle = new CandleData
                            {
                                OpenTime = klineData.OpenTime,
                                Open = klineData.OpenPrice,
                                High = klineData.HighPrice,
                                Low = klineData.LowPrice,
                                Close = klineData.ClosePrice,
                                Volume = klineData.Volume
                            };

                            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ª–∞–≥–æ–≤
                            Task.Run(() =>
                            {
                                try
                                {
                                    var coinData = _dataStorage.GetCoinData(symbol);
                                    if (coinData != null)
                                    {
                                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º NATR
                                        TechnicalAnalysisService.UpdateCandleData(coinData, newCandle, _config.HistoryCandles + 10);
                                        _dataStorage.UpdateCoinData(symbol, coinData);

                                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                                        OnCandleUpdate?.Invoke(symbol, newCandle);
                                        OnNatrUpdate?.Invoke(symbol, coinData.Natr);

                                        // –£–±—Ä–∞–Ω –º—É—Å–æ—Ä–Ω—ã–π –ª–æ–≥ –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏ {symbol}: {ex.Message}");
                                }
                            });
                        });

                    if (subscription.Success)
                    {
                        foreach (var symbol in batch)
                        {
                            _candleSubscriptions[symbol] = subscription.Data;
                        }
                        successCount += batch.Count;
                    }
                    else
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–≤–µ—á–∏ –¥–ª—è –ø–∞–∫–µ—Ç–∞: {subscription.Error}");
                    }

                    await Task.Delay(100);
                }

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üïê –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–≤–µ—á–∏: {successCount}/{symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤");
                return successCount > 0;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–≤–µ—á–∏: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        /// </summary>
        public async Task StopAsync()
        {
            if (!_isRunning)
                return;

            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–∏—Å–∞...");

                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                var unsubscribeTasks = new List<Task>();

                foreach (var subscription in _priceSubscriptions.Values)
                {
                    unsubscribeTasks.Add(subscription.CloseAsync());
                }

                foreach (var subscription in _candleSubscriptions.Values)
                {
                    unsubscribeTasks.Add(subscription.CloseAsync());
                }

                await Task.WhenAll(unsubscribeTasks);

                _priceSubscriptions.Clear();
                _candleSubscriptions.Clear();
                _isRunning = false;

                var uptime = DateTime.UtcNow - _startTime;
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ WebSocket –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.TotalMinutes:F1} –º–∏–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WebSocket: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        /// </summary>
        public WebSocketStats GetStats()
        {
            return new WebSocketStats
            {
                IsRunning = _isRunning,
                StartTime = _isRunning ? _startTime : (DateTime?)null,
                Uptime = _isRunning ? DateTime.UtcNow - _startTime : TimeSpan.Zero,
                PriceSubscriptions = _priceSubscriptions.Count,
                CandleSubscriptions = _candleSubscriptions.Count,
                TotalSubscriptions = _priceSubscriptions.Count + _candleSubscriptions.Count
            };
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º
        /// </summary>
        public async Task<bool> AddSymbolsAsync(List<string> newSymbols)
        {
            if (!_isRunning)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è WebSocket –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–º–≤–æ–ª—ã");
                return false;
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            var symbolsToAdd = newSymbols.Where(s => !_priceSubscriptions.ContainsKey(s)).ToList();
            
            if (symbolsToAdd.Count == 0)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ÑπÔ∏è –í—Å–µ —Å–∏–º–≤–æ–ª—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è");
                return true;
            }

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ûï –î–æ–±–∞–≤–ª—è–µ–º {symbolsToAdd.Count} –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫ WebSocket...");

            var priceResult = await SubscribeToPricesAsync(symbolsToAdd);
            var candleResult = await SubscribeToCandlesAsync(symbolsToAdd);

            return priceResult && candleResult;
        }
    }

    public class WebSocketStats
    {
        public bool IsRunning { get; set; }
        public DateTime? StartTime { get; set; }
        public TimeSpan Uptime { get; set; }
        public int PriceSubscriptions { get; set; }
        public int CandleSubscriptions { get; set; }
        public int TotalSubscriptions { get; set; }
    }
}
