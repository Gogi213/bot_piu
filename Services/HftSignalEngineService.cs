using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System.Diagnostics;
using Models;
using Config;

namespace Services
{
    /// <summary>
    /// –ü—Å–µ–≤–¥–æ-HFT –¥–≤–∏–∂–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    /// </summary>
    public class HftSignalEngineService
    {
        private readonly TradingStrategyService _strategyService;
        private readonly DataStorageService _dataStorage;
        private readonly BackendConfig _config;
        
        // –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        private readonly ConcurrentDictionary<string, HftSignalState> _signalStates = new();
        private readonly ConcurrentDictionary<string, PriceBuffer> _priceBuffers = new();
        private readonly ConcurrentQueue<HftSignalEvent> _signalEvents = new();
        
        // –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        private Timer? _ultraFastTimer;  // 100ms - —É–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
        private Timer? _fastTimer;       // 1000ms - –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
        private Timer? _cleanupTimer;    // 5000ms - –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤
        
        private volatile bool _isRunning = false;
        private readonly object _lockObject = new object();
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        private long _totalAnalyses = 0;
        private long _totalSignalChanges = 0;
        private long _totalProcessingTimeMs = 0;
        private DateTime _startTime;
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è HFT —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        public event Action<HftSignalEvent>? OnHftSignalChange;
        public event Action<HftPerformanceStats>? OnPerformanceUpdate;

        public HftSignalEngineService(
            TradingStrategyService strategyService,
            DataStorageService dataStorage,
            BackendConfig config)
        {
            _strategyService = strategyService;
            _dataStorage = dataStorage;
            _config = config;
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ HFT –¥–≤–∏–∂–∫–∞
        /// </summary>
        public async Task<bool> StartAsync()
        {
            if (_isRunning)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è HFT –¥–≤–∏–∂–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
                return false;
            }

            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö° –ó–ê–ü–£–°–ö HFT SIGNAL ENGINE");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ================================");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üéØ –†–µ–∂–∏–º: –ü—Å–µ–≤–¥–æ-HFT (High Frequency Trading)");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚è±Ô∏è –£–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑: –∫–∞–∂–¥—ã–µ 200–º—Å");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑: –∫–∞–∂–¥—ã–µ 1500–º—Å");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üßπ –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤: –∫–∞–∂–¥—ã–µ 5000–º—Å");
                
                _isRunning = true;
                _startTime = DateTime.UtcNow;
                _totalAnalyses = 0;
                _totalSignalChanges = 0;
                _totalProcessingTimeMs = 0;

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
                await InitializeHftStatesAsync();

                // –ó–∞–ø—É—Å–∫ –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ (–º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ª–∞–≥–æ–≤)
                _ultraFastTimer = new Timer(async _ => await UltraFastAnalysisAsync(), null, 200, 200);
                _fastTimer = new Timer(async _ => await FastAnalysisAsync(), null, 1500, 1500);
                _cleanupTimer = new Timer(_ => CleanupBuffers(), null, 5000, 5000);

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ HFT –¥–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HFT –¥–≤–∏–∂–∫–∞: {ex.Message}");
                _isRunning = false;
                return false;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è WebSocket)
        /// </summary>
        public void UpdatePrice(string symbol, decimal price)
        {
            if (!_isRunning) return;

            var timestamp = DateTime.UtcNow;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä —Ü–µ–Ω
            if (!_priceBuffers.TryGetValue(symbol, out var buffer))
            {
                buffer = new PriceBuffer();
                _priceBuffers[symbol] = buffer;
            }
            
            buffer.AddPrice(price, timestamp);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            if (_signalStates.TryGetValue(symbol, out var state))
            {
                var priceChangePercent = Math.Abs((price - state.LastPrice) / state.LastPrice * 100);
                if (priceChangePercent >= 0.1m) // 0.1% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                {
                    state.LastPrice = price;
                    state.LastPriceUpdate = timestamp;
                    state.PriceChangesCount++;
                    
                    // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    state.NeedsAnalysis = true;
                }
            }
        }

        /// <summary>
        /// –£–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (–∫–∞–∂–¥—ã–µ 100–º—Å) - —Ç–æ–ª—å–∫–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        /// </summary>
        private async Task UltraFastAnalysisAsync()
        {
            if (!_isRunning) return;

            var sw = Stopwatch.StartNew();
            var analysisCount = 0;

            try
            {
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∏–ª–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
                var prioritySymbols = _signalStates
                    .Where(kvp => kvp.Value.NeedsAnalysis || kvp.Value.IsHighVolatility)
                    .Take(5) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    .ToList();

                foreach (var kvp in prioritySymbols)
                {
                    var symbol = kvp.Key;
                    var state = kvp.Value;
                    
                    var coinData = _dataStorage.GetCoinData(symbol);
                    if (coinData == null) continue;

                    // –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞
                    var newSignal = _strategyService.AnalyzeCoin(coinData);
                    analysisCount++;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if (state.CurrentSignal != newSignal.FinalSignal)
                    {
                        var oldSignal = state.CurrentSignal;
                        state.CurrentSignal = newSignal.FinalSignal;
                        state.LastSignalChange = DateTime.UtcNow;
                        state.SignalChangesCount++;
                        
                        Interlocked.Increment(ref _totalSignalChanges);

                        // –°–æ–∑–¥–∞–µ–º HFT —Å–æ–±—ã—Ç–∏–µ
                        var hftEvent = new HftSignalEvent
                        {
                            Symbol = symbol,
                            OldSignal = oldSignal,
                            NewSignal = newSignal.FinalSignal,
                            ZScore = newSignal.ZScore,
                            Price = newSignal.CurrentPrice,
                            Timestamp = DateTime.UtcNow,
                            LatencyMs = sw.ElapsedMilliseconds,
                            EventType = HftEventType.UltraFast
                        };

                        _signalEvents.Enqueue(hftEvent);
                        
                        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã BUY/SELL
                        if (newSignal.FinalSignal != "FLAT")
                        {
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö° –°–ò–ì–ù–ê–õ: {symbol} {oldSignal}‚Üí{GetSignalEmoji(newSignal.FinalSignal)}{newSignal.FinalSignal} " +
                                             $"Z={newSignal.ZScore:F2} P={newSignal.CurrentPrice:F6}");
                        }

                        OnHftSignalChange?.Invoke(hftEvent);
                    }

                    state.NeedsAnalysis = false;
                    state.LastAnalysis = DateTime.UtcNow;
                }

                Interlocked.Add(ref _totalAnalyses, analysisCount);
                Interlocked.Add(ref _totalProcessingTimeMs, sw.ElapsedMilliseconds);

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                if (_totalAnalyses % 100 == 0 && _totalAnalyses > 0)
                {
                    var stats = GetPerformanceStats();
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä HFT-STATS: {stats.AnalysesPerSecond:F0}/—Å–µ–∫, " +
                                     $"avg={stats.AverageLatencyMs:F1}ms, —Å–∏–≥–Ω–∞–ª–æ–≤={stats.TotalSignalChanges}");
                    
                    OnPerformanceUpdate?.Invoke(stats);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå HFT Ultra Fast Error: {ex.Message}");
            }
            finally
            {
                sw.Stop();
            }

            await Task.CompletedTask;
        }

        /// <summary>
        /// –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É) - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        /// </summary>
        private Task FastAnalysisAsync()
        {
            if (!_isRunning) return Task.CompletedTask;

            var sw = Stopwatch.StartNew();

            try
            {
                var activeCoins = _dataStorage.GetFilteredCoins(_config.MinVolumeUsdt, _config.MinNatrPercent);
                var analysisCount = 0;

                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                var tasks = activeCoins.Take(20).Select(coin =>
                {
                    try
                    {
                        var signal = _strategyService.AnalyzeCoin(coin);
                        Interlocked.Increment(ref analysisCount);

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        var state = _signalStates.GetOrAdd(coin.Symbol, _ => new HftSignalState 
                        { 
                            Symbol = coin.Symbol,
                            CurrentSignal = "FLAT",
                            IsHighVolatility = (coin.Natr ?? 0) >= _config.MinNatrPercent * 2
                        });

                        if (state.CurrentSignal != signal.FinalSignal)
                        {
                            var oldSignal = state.CurrentSignal;
                            state.CurrentSignal = signal.FinalSignal;
                            state.LastSignalChange = DateTime.UtcNow;
                            state.SignalChangesCount++;
                            
                            Interlocked.Increment(ref _totalSignalChanges);

                            var hftEvent = new HftSignalEvent
                            {
                                Symbol = coin.Symbol,
                                OldSignal = oldSignal,
                                NewSignal = signal.FinalSignal,
                                ZScore = signal.ZScore,
                                Price = signal.CurrentPrice,
                                Timestamp = DateTime.UtcNow,
                                LatencyMs = sw.ElapsedMilliseconds,
                                EventType = HftEventType.Fast
                            };

                            _signalEvents.Enqueue(hftEvent);

                            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã BUY/SELL  
                            if (signal.FinalSignal != "FLAT")
                            {
                                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –°–ò–ì–ù–ê–õ: {coin.Symbol} {oldSignal}‚Üí{GetSignalEmoji(signal.FinalSignal)}{signal.FinalSignal} " +
                                                 $"Z={signal.ZScore:F2} NATR={coin.Natr:F2}%");
                            }

                            OnHftSignalChange?.Invoke(hftEvent);
                        }

                        state.LastAnalysis = DateTime.UtcNow;
                        return signal;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå HFT Fast Error for {coin.Symbol}: {ex.Message}");
                        return null;
                    }
                });

                var results = tasks.ToList();
                
                Interlocked.Add(ref _totalAnalyses, analysisCount);
                Interlocked.Add(ref _totalProcessingTimeMs, sw.ElapsedMilliseconds);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå HFT Fast Analysis Error: {ex.Message}");
            }
            finally
            {
                sw.Stop();
            }

            return Task.CompletedTask;
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HFT —Å–æ—Å—Ç–æ—è–Ω–∏–π
        /// </summary>
        private Task InitializeHftStatesAsync()
        {
            var activeCoins = _dataStorage.GetFilteredCoins(_config.MinVolumeUsdt, _config.MinNatrPercent);
            
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HFT —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è {activeCoins.Count} –º–æ–Ω–µ—Ç...");

            foreach (var coin in activeCoins)
            {
                var signal = _strategyService.AnalyzeCoin(coin);
                
                var state = new HftSignalState
                {
                    Symbol = coin.Symbol,
                    CurrentSignal = signal.FinalSignal,
                    LastPrice = coin.CurrentPrice,
                    LastAnalysis = DateTime.UtcNow,
                    LastPriceUpdate = DateTime.UtcNow,
                    IsHighVolatility = (coin.Natr ?? 0) >= _config.MinNatrPercent * 1.5m
                };

                _signalStates[coin.Symbol] = state;
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä —Ü–µ–Ω
                var buffer = new PriceBuffer();
                buffer.AddPrice(coin.CurrentPrice, DateTime.UtcNow);
                _priceBuffers[coin.Symbol] = buffer;
            }

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ HFT —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
            return Task.CompletedTask;
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        /// </summary>
        private void CleanupBuffers()
        {
            if (!_isRunning) return;

            try
            {
                var cutoffTime = DateTime.UtcNow.AddMinutes(-5);
                var cleanedBuffers = 0;

                foreach (var buffer in _priceBuffers.Values)
                {
                    var cleaned = buffer.CleanOldPrices(cutoffTime);
                    if (cleaned > 0) cleanedBuffers++;
                }

                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è
                var eventsToRemove = 0;
                while (_signalEvents.Count > 1000 && _signalEvents.TryDequeue(out _))
                {
                    eventsToRemove++;
                }

                if (cleanedBuffers > 0 || eventsToRemove > 0)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üßπ HFT Cleanup: –±—É—Ñ–µ—Ä–æ–≤={cleanedBuffers}, —Å–æ–±—ã—Ç–∏–π={eventsToRemove}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå HFT Cleanup Error: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HFT –¥–≤–∏–∂–∫–∞
        /// </summary>
        public async Task StopAsync()
        {
            if (!_isRunning) return;

            _isRunning = false;
            
            _ultraFastTimer?.Dispose();
            _fastTimer?.Dispose();
            _cleanupTimer?.Dispose();

            var uptime = DateTime.UtcNow - _startTime;
            var finalStats = GetPerformanceStats();

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë HFT –¥–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø HFT –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.TotalMinutes:F1} –º–∏–Ω");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üîç –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {finalStats.TotalAnalyses:N0}");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤: {finalStats.TotalSignalChanges:N0}");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    ‚ö° –ê–Ω–∞–ª–∏–∑–æ–≤/—Å–µ–∫: {finalStats.AnalysesPerSecond:F0}");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üìà –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {finalStats.AverageLatencyMs:F1}–º—Å");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üèÜ –ü–∏–∫–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {finalStats.PeakAnalysesPerSecond:F0}/—Å–µ–∫");

            await Task.CompletedTask;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        public HftPerformanceStats GetPerformanceStats()
        {
            var uptime = DateTime.UtcNow - _startTime;
            var uptimeSeconds = Math.Max(uptime.TotalSeconds, 1);

            return new HftPerformanceStats
            {
                IsRunning = _isRunning,
                Uptime = uptime,
                TotalAnalyses = _totalAnalyses,
                TotalSignalChanges = _totalSignalChanges,
                AnalysesPerSecond = _totalAnalyses / uptimeSeconds,
                AverageLatencyMs = _totalAnalyses > 0 ? (double)_totalProcessingTimeMs / _totalAnalyses : 0,
                ActiveSymbols = _signalStates.Count,
                BufferedPrices = _priceBuffers.Sum(kvp => kvp.Value.Count),
                QueuedEvents = _signalEvents.Count,
                PeakAnalysesPerSecond = Math.Max(_totalAnalyses / uptimeSeconds, 0) // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
            };
        }

        private string GetSignalEmoji(string signal) => signal switch
        {
            "LONG" => "üü¢",
            "SHORT" => "üî¥",
            _ => "‚ö™"
        };
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è HFT
    public class HftSignalState
    {
        public string Symbol { get; set; } = string.Empty;
        public string CurrentSignal { get; set; } = "FLAT";
        public decimal LastPrice { get; set; }
        public DateTime LastAnalysis { get; set; }
        public DateTime LastPriceUpdate { get; set; }
        public DateTime LastSignalChange { get; set; }
        public bool NeedsAnalysis { get; set; }
        public bool IsHighVolatility { get; set; }
        public int SignalChangesCount { get; set; }
        public int PriceChangesCount { get; set; }
    }

    public class PriceBuffer
    {
        private readonly ConcurrentQueue<PricePoint> _prices = new();
        private volatile int _count = 0;

        public int Count => _count;

        public void AddPrice(decimal price, DateTime timestamp)
        {
            _prices.Enqueue(new PricePoint { Price = price, Timestamp = timestamp });
            Interlocked.Increment(ref _count);
        }

        public int CleanOldPrices(DateTime cutoffTime)
        {
            var removed = 0;
            while (_prices.TryPeek(out var oldest) && oldest.Timestamp < cutoffTime)
            {
                if (_prices.TryDequeue(out _))
                {
                    Interlocked.Decrement(ref _count);
                    removed++;
                }
                else break;
            }
            return removed;
        }
    }

    public class PricePoint
    {
        public decimal Price { get; set; }
        public DateTime Timestamp { get; set; }
    }

    public class HftSignalEvent
    {
        public string Symbol { get; set; } = string.Empty;
        public string OldSignal { get; set; } = string.Empty;
        public string NewSignal { get; set; } = string.Empty;
        public decimal ZScore { get; set; }
        public decimal Price { get; set; }
        public DateTime Timestamp { get; set; }
        public long LatencyMs { get; set; }
        public HftEventType EventType { get; set; }
    }

    public enum HftEventType
    {
        UltraFast,  // 100ms –∞–Ω–∞–ª–∏–∑
        Fast        // 1000ms –∞–Ω–∞–ª–∏–∑
    }

    public class HftPerformanceStats
    {
        public bool IsRunning { get; set; }
        public TimeSpan Uptime { get; set; }
        public long TotalAnalyses { get; set; }
        public long TotalSignalChanges { get; set; }
        public double AnalysesPerSecond { get; set; }
        public double AverageLatencyMs { get; set; }
        public int ActiveSymbols { get; set; }
        public int BufferedPrices { get; set; }
        public int QueuedEvents { get; set; }
        public double PeakAnalysesPerSecond { get; set; }
    }
}
