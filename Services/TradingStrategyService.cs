using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using Models;
using Config;

namespace Services
{
    /// <summary>
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è edge-detection –∫–∞–∫ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–µ
    /// </summary>
    public class SignalState
    {
        public bool PreviousLongCondition { get; set; } = false;
        public bool PreviousShortCondition { get; set; } = false;
        public DateTime LastUpdate { get; set; } = DateTime.MinValue;
    }

    public class TradingStrategyService
    {
        private readonly BackendConfig _config;
        private readonly ConcurrentDictionary<string, SignalState> _signalStates = new();
        private readonly FifteenSecondCandleService? _fifteenSecondService;

        public TradingStrategyService(BackendConfig config, FifteenSecondCandleService? fifteenSecondService = null)
        {
            _config = config;
            _fifteenSecondService = fifteenSecondService;
        }

        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤–æ–π–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        /// </summary>
        public StrategyResult AnalyzeCoin(CoinData coinData)
        {
            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ 15-—Å–µ–∫—É–Ω–¥–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if (_config.EnableFifteenSecondTrading && _fifteenSecondService != null)
            {
                return AnalyzeCoinFifteenSecond(coinData);
            }
            
            return AnalyzeCoinOneMinute(coinData);
        }

        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑ –Ω–∞ 15-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–≤–µ—á–∞—Ö
        /// </summary>
        private StrategyResult AnalyzeCoinFifteenSecond(CoinData coinData)
        {
            if (_fifteenSecondService == null)
            {
                return new StrategyResult
                {
                    Symbol = coinData?.Symbol ?? "UNKNOWN",
                    FinalSignal = "FLAT",
                    Reason = "15s —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞ (–ø—Ä–æ–≥—Ä–µ–≤)
            if (!_fifteenSecondService.IsSymbolReady(coinData.Symbol))
            {
                return new StrategyResult
                {
                    Symbol = coinData.Symbol,
                    FinalSignal = "FLAT",
                    Reason = $"–ü—Ä–æ–≥—Ä–µ–≤ 15s —Å–≤–µ—á–µ–π: {_fifteenSecondService.GetFifteenSecondCandles(coinData.Symbol)?.Count ?? 0}/{_config.FifteenSecondWarmupCandles}"
                };
            }

            // –ü–æ–ª—É—á–∞–µ–º 15-—Å–µ–∫—É–Ω–¥–Ω—ã–µ —Å–≤–µ—á–∏
            var fifteenSecondCandles = _fifteenSecondService.GetFifteenSecondCandles(coinData.Symbol);
            if (fifteenSecondCandles == null || fifteenSecondCandles.Count < Math.Max(_config.ZScoreSmaPeriod, _config.StrategySmaPeriod))
            {
                return new StrategyResult
                {
                    Symbol = coinData.Symbol,
                    FinalSignal = "FLAT",
                    Reason = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 15s –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                };
            }

            var result = new StrategyResult
            {
                Symbol = coinData.Symbol,
                CurrentPrice = coinData.CurrentPrice,
                Natr = coinData.Natr ?? 0,
                Timestamp = DateTime.UtcNow
            };

            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: Z-Score –Ω–∞ 15s —Å–≤–µ—á–∞—Ö
            var (zScore, zScoreSignal) = TechnicalAnalysisService.CalculateZScoreSma(
                fifteenSecondCandles, 
                _config.ZScoreSmaPeriod, 
                _config.ZScoreThreshold);

            result.ZScore = zScore;
            result.ZScoreSignal = zScoreSignal;

            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: SMA Trend –Ω–∞ 15s —Å–≤–µ—á–∞—Ö  
            var (smaScore, smaSignal) = TechnicalAnalysisService.CalculateSmaStrategy(
                fifteenSecondCandles, 
                _config.StrategySmaPeriod);

            result.Sma = smaScore;
            result.SmaSignal = smaSignal;

            // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å edge-detection –∫–∞–∫ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–µ
            result.FinalSignal = CombineSignalsWithEdgeDetection(coinData.Symbol, result.ZScoreSignal, result.SmaSignal);
            result.Reason = GetSignalReason(result.ZScoreSignal, result.SmaSignal, result.ZScore, coinData.CurrentPrice, result.Sma) + " (15s)";

            return result;
        }

        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑ –Ω–∞ 1-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–∞—Ö (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
        /// </summary>
        private StrategyResult AnalyzeCoinOneMinute(CoinData coinData)
        {
            if (coinData?.RecentCandles == null || coinData.RecentCandles.Count < Math.Max(_config.ZScoreSmaPeriod, _config.StrategySmaPeriod))
            {
                return new StrategyResult
                {
                    Symbol = coinData?.Symbol ?? "UNKNOWN",
                    FinalSignal = "FLAT",
                    Reason = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                };
            }

            var result = new StrategyResult
            {
                Symbol = coinData.Symbol,
                CurrentPrice = coinData.CurrentPrice,
                Natr = coinData.Natr ?? 0,
                Timestamp = DateTime.UtcNow
            };

            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: Z-Score (Mean Reversion)
            var (zScore, zScoreSignal) = TechnicalAnalysisService.CalculateZScoreSma(
                coinData.RecentCandles, 
                _config.ZScoreSmaPeriod, 
                _config.ZScoreThreshold);

            result.ZScore = zScore;
            result.ZScoreSignal = zScoreSignal;

            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: SMA Trend Following
            var (sma, smaSignal) = TechnicalAnalysisService.CalculateSmaStrategy(
                coinData.RecentCandles, 
                _config.StrategySmaPeriod);

            result.Sma = sma;
            result.SmaSignal = smaSignal;

            // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å edge-detection –∫–∞–∫ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–µ
            result.FinalSignal = CombineSignalsWithEdgeDetection(coinData.Symbol, zScoreSignal, smaSignal);
            result.Reason = GetSignalReason(zScoreSignal, smaSignal, zScore, coinData.CurrentPrice, sma);

            return result;
        }

        /// <summary>
        /// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å edge-detection –∫–∞–∫ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–µ
        /// </summary>
        private string CombineSignalsWithEdgeDetection(string symbol, string zScoreSignal, string smaSignal)
        {
            // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞

            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
            var state = _signalStates.GetOrAdd(symbol, _ => new SignalState());

            // –¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è –∫–∞–∫ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–µ
            bool currentLongCondition = smaSignal == "LONG" && zScoreSignal == "LONG";   // (close > SMA) & (Z <= -threshold)
            bool currentShortCondition = smaSignal == "SHORT" && zScoreSignal == "SHORT"; // (close < SMA) & (Z >= +threshold)

            // Edge-detection: —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è
            bool rawLong = currentLongCondition && !state.PreviousLongCondition;
            bool rawShort = currentShortCondition && !state.PreviousShortCondition;

            // –ò—Å–∫–ª—é—á–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–∫–∞–∫ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–µ)
            if (rawLong && rawShort)
            {
                rawLong = false;
                rawShort = false;
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢: {symbol} –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ LONG –∏ SHORT - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º");
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state.PreviousLongCondition = currentLongCondition;
            state.PreviousShortCondition = currentShortCondition;
            state.LastUpdate = DateTime.UtcNow;

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª
            if (rawLong)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ EDGE LONG –°–ò–ì–ù–ê–õ: {symbol}");
                return "LONG";
            }
            
            if (rawShort)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üî• EDGE SHORT –°–ò–ì–ù–ê–õ: {symbol}");
                return "SHORT";
            }

            // –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            // –£–±—Ä–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ FLAT
            return "FLAT";
        }

        /// <summary>
        /// –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞
        /// </summary>
        private string GetSignalReason(string zScoreSignal, string smaSignal, decimal zScore, decimal currentPrice, decimal sma)
        {
            if (zScoreSignal == smaSignal && zScoreSignal != "FLAT")
            {
                var priceVsSma = currentPrice > sma ? "–≤—ã—à–µ" : "–Ω–∏–∂–µ";
                var zScoreDirection = zScore > 0 ? "–ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω–∞" : "–Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–∞";
                
                return $"–û–±–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: —Ü–µ–Ω–∞ {priceVsSma} SMA({_config.StrategySmaPeriod}) –∏ {zScoreDirection} (Z={zScore:F2})";
            }
            else if (zScoreSignal != smaSignal)
            {
                return $"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: Z-Score={zScoreSignal} vs SMA={smaSignal}";
            }
            else
            {
                return $"–ù–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: Z={zScore:F2}, —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ SMA";
            }
        }

        /// <summary>
        /// –ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –≤ –ø—É–ª–µ
        /// </summary>
        public List<StrategyResult> AnalyzeAllCoins(List<CoinData> coins)
        {
            var results = new List<StrategyResult>();

            foreach (var coin in coins)
            {
                try
                {
                    var result = AnalyzeCoin(coin);
                    results.Add(result);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {coin.Symbol}: {ex.Message}");
                    
                    results.Add(new StrategyResult
                    {
                        Symbol = coin.Symbol,
                        FinalSignal = "FLAT",
                        Reason = $"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {ex.Message}"
                    });
                }
            }

            return results;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        /// </summary>
        public List<StrategyResult> GetActiveSignals(List<CoinData> coins)
        {
            var allResults = AnalyzeAllCoins(coins);
            
            return allResults
                .Where(r => r.FinalSignal == "LONG" || r.FinalSignal == "SHORT")
                .OrderByDescending(r => Math.Abs(r.ZScore)) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
                .ToList();
        }

        /// <summary>
        /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
        /// </summary>
        public StrategyStatistics GetStatistics(List<StrategyResult> results)
        {
            if (!results.Any())
                return new StrategyStatistics();

            var stats = new StrategyStatistics
            {
                TotalCoins = results.Count,
                LongSignals = results.Count(r => r.FinalSignal == "LONG"),
                ShortSignals = results.Count(r => r.FinalSignal == "SHORT"),
                FlatSignals = results.Count(r => r.FinalSignal == "FLAT"),
                AvgZScore = Math.Round(results.Average(r => Math.Abs(r.ZScore)), 2),
                MaxZScore = Math.Round(results.Max(r => Math.Abs(r.ZScore)), 2),
                AvgNatr = Math.Round(results.Where(r => r.Natr > 0).Average(r => r.Natr), 2)
            };

            stats.SignalRate = Math.Round((decimal)(stats.LongSignals + stats.ShortSignals) / stats.TotalCoins * 100, 1);

            return stats;
        }
    }

    public class StrategyResult
    {
        public string Symbol { get; set; } = string.Empty;
        public decimal CurrentPrice { get; set; }
        public decimal Natr { get; set; }
        public DateTime Timestamp { get; set; }

        // Z-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        public decimal ZScore { get; set; }
        public string ZScoreSignal { get; set; } = "FLAT";

        // SMA —Å—Ç—Ä–∞—Ç–µ–≥–∏—è  
        public decimal Sma { get; set; }
        public string SmaSignal { get; set; } = "FLAT";

        // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        public string FinalSignal { get; set; } = "FLAT";
        public string Reason { get; set; } = string.Empty;
    }

    public class StrategyStatistics
    {
        public int TotalCoins { get; set; }
        public int LongSignals { get; set; }
        public int ShortSignals { get; set; }
        public int FlatSignals { get; set; }
        public decimal SignalRate { get; set; } // –ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
        public decimal AvgZScore { get; set; }
        public decimal MaxZScore { get; set; }
        public decimal AvgNatr { get; set; }
    }
}
