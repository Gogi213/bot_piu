using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Models;
using Config;

namespace Services
{
    public class UniverseUpdateService
    {
        private readonly BinanceDataService _binanceService;
        private readonly DataStorageService _dataStorage;
        private readonly BackendConfig _config;

        public UniverseUpdateService(
            BinanceDataService binanceService, 
            DataStorageService dataStorage, 
            BackendConfig config)
        {
            _binanceService = binanceService;
            _dataStorage = dataStorage;
            _config = config;
        }

        /// <summary>
        /// –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞ –º–æ–Ω–µ—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏, —Ä–∞—Å—á–µ—Ç NATR
        /// </summary>
        public async Task<UniverseUpdateResult> UpdateUniverseAsync()
        {
            var result = new UniverseUpdateResult
            {
                StartTime = DateTime.UtcNow
            };

            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞ –º–æ–Ω–µ—Ç...");

                // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –æ–±—ä–µ–º—É
                var filteredCoins = await _binanceService.GetFilteredUsdtPerpetualsAsync();
                result.TotalCoinsFound = filteredCoins.Count;

                if (filteredCoins.Count == 0)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç —Å –æ–±—ä–µ–º–æ–º >{_config.MinVolumeUsdt:N0} USDT");
                    result.Success = false;
                    result.ErrorMessage = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç";
                    return result;
                }

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –ù–∞–π–¥–µ–Ω–æ {filteredCoins.Count} –º–æ–Ω–µ—Ç. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...");

                // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
                var symbols = filteredCoins.Select(c => c.Symbol).ToList();
                var historicalData = await _binanceService.GetBatchHistoricalDataAsync(symbols, _config.HistoryCandles);

                // –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Å–≤–µ—á–∞–º–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º NATR
                int coinsWithNatr = 0;
                foreach (var coin in filteredCoins)
                {
                    if (historicalData.TryGetValue(coin.Symbol, out var candles) && candles.Count > 0)
                    {
                        coin.RecentCandles = candles;
                        coin.Natr = TechnicalAnalysisService.CalculateNatr(candles, _config.NatrPeriods);
                        
                        if (coin.Natr.HasValue)
                        {
                            coinsWithNatr++;
                        }
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    _dataStorage.UpdateCoinData(coin.Symbol, coin);
                }

                // –®–∞–≥ 4: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ NATR –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                var finalCoins = _dataStorage.GetFilteredCoins(_config.MinVolumeUsdt, _config.MinNatrPercent);

                result.CoinsWithHistory = historicalData.Values.Count(candles => candles.Count > 0);
                result.CoinsWithNatr = coinsWithNatr;
                result.FinalFilteredCoins = finalCoins.Count;
                result.Success = true;
                result.EndTime = DateTime.UtcNow;
                result.Duration = result.EndTime.Value - result.StartTime;

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:");
                Console.WriteLine($"    üìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {result.TotalCoinsFound} –º–æ–Ω–µ—Ç");
                Console.WriteLine($"    üìä –° –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {result.CoinsWithHistory} –º–æ–Ω–µ—Ç");
                Console.WriteLine($"    üßÆ –° —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º NATR: {result.CoinsWithNatr} –º–æ–Ω–µ—Ç");
                Console.WriteLine($"    ‚ú® –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä (NATR ‚â• {_config.MinNatrPercent}%): {result.FinalFilteredCoins} –º–æ–Ω–µ—Ç");
                Console.WriteLine($"    ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.Duration.TotalSeconds:F1} —Å–µ–∫");

                return result;
            }
            catch (Exception ex)
            {
                result.Success = false;
                result.ErrorMessage = ex.Message;
                result.EndTime = DateTime.UtcNow;
                result.Duration = result.EndTime.Value - result.StartTime;

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–ª–∞: {ex.Message}");
                return result;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –ø—É–ª–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        /// </summary>
        public UniversePreview GetUniversePreview()
        {
            var allCoins = _dataStorage.GetAllCoins();
            var filteredCoins = _dataStorage.GetFilteredCoins(_config.MinVolumeUsdt, _config.MinNatrPercent);

            var preview = new UniversePreview
            {
                TotalCoins = allCoins.Count,
                FilteredCoins = filteredCoins.Count,
                LastUpdate = allCoins.Any() ? allCoins.Max(c => c.LastUpdated) : (DateTime?)null,
                TopCoinsByVolume = allCoins
                    .OrderByDescending(c => c.Volume24h)
                    .Take(10)
                    .Select(c => new CoinSummary
                    {
                        Symbol = c.Symbol,
                        Volume24h = c.Volume24h,
                        CurrentPrice = c.CurrentPrice,
                        Natr = c.Natr
                    }).ToList(),
                TopCoinsByNatr = filteredCoins
                    .Where(c => c.Natr.HasValue)
                    .OrderByDescending(c => c.Natr!.Value)
                    .Take(10)
                    .Select(c => new CoinSummary
                    {
                        Symbol = c.Symbol,
                        Volume24h = c.Volume24h,
                        CurrentPrice = c.CurrentPrice,
                        Natr = c.Natr
                    }).ToList()
            };

            return preview;
        }
    }

    public class UniverseUpdateResult
    {
        public DateTime StartTime { get; set; }
        public DateTime? EndTime { get; set; }
        public TimeSpan Duration { get; set; }
        public bool Success { get; set; }
        public string? ErrorMessage { get; set; }
        public int TotalCoinsFound { get; set; }
        public int CoinsWithHistory { get; set; }
        public int CoinsWithNatr { get; set; }
        public int FinalFilteredCoins { get; set; }
    }

    public class UniversePreview
    {
        public int TotalCoins { get; set; }
        public int FilteredCoins { get; set; }
        public DateTime? LastUpdate { get; set; }
        public List<CoinSummary> TopCoinsByVolume { get; set; } = new();
        public List<CoinSummary> TopCoinsByNatr { get; set; } = new();
    }

    public class CoinSummary
    {
        public string Symbol { get; set; } = string.Empty;
        public decimal Volume24h { get; set; }
        public decimal CurrentPrice { get; set; }
        public decimal? Natr { get; set; }
    }
}

