using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Binance.Net.Clients;
using Binance.Net.Enums;
using Models;
using Config;

namespace Services
{
    public class BinanceDataService
    {
        private readonly BinanceRestClient _restClient;
        private readonly BackendConfig _config;
        public BinanceDataService(BinanceRestClient restClient, BackendConfig config)
        {
            _restClient = restClient;
            _config = config;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –æ–±—ä–µ–º—É
        /// </summary>
        public async Task<List<CoinData>> GetFilteredUsdtPerpetualsAsync()
        {
            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –ó–∞–≥—Ä—É–∑–∫–∞ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...");

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limit
                await Task.Delay(1000);

                // –ü–æ–ª—É—á–∞–µ–º 24h —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
                var tickerResponse = await _restClient.UsdFuturesApi.ExchangeData.GetTickersAsync();
                
                if (!tickerResponse.Success)
                {
                    var errorMsg = tickerResponse.Error?.ToString() ?? "Unknown error";
                    if (errorMsg.Contains("403") || errorMsg.Contains("Forbidden"))
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...");
                        await Task.Delay(30000);
                        
                        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                        tickerResponse = await _restClient.UsdFuturesApi.ExchangeData.GetTickersAsync();
                        if (!tickerResponse.Success)
                        {
                            throw new Exception($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ retry: {tickerResponse.Error}");
                        }
                    }
                    else
                    {
                        throw new Exception($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {tickerResponse.Error}");
                    }
                }

                var filteredCoins = new List<CoinData>();

                foreach (var ticker in tickerResponse.Data)
                {
                    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                    if (!ticker.Symbol.EndsWith("USDT"))
                        continue;

                    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞
                    var volume24hUsdt = ticker.QuoteVolume;
                    if (volume24hUsdt < _config.MinVolumeUsdt)
                        continue;

                    var coinData = new CoinData
                    {
                        Symbol = ticker.Symbol,
                        Volume24h = volume24hUsdt,
                        CurrentPrice = ticker.LastPrice,
                        LastUpdated = DateTime.UtcNow,
                        RecentCandles = new List<CandleData>()
                    };

                    filteredCoins.Add(coinData);
                }

                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É (—É–±—ã–≤–∞–Ω–∏–µ)
                filteredCoins = filteredCoins
                    .OrderByDescending(c => c.Volume24h)
                    .ToList();

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ù–∞–π–¥–µ–Ω–æ {filteredCoins.Count} –º–æ–Ω–µ—Ç —Å –æ–±—ä–µ–º–æ–º >{_config.MinVolumeUsdt:N0} USDT");

                return filteredCoins;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: {ex.Message}");
                return new List<CoinData>();
            }
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        /// </summary>
        public async Task<List<CandleData>> GetHistoricalCandlesAsync(string symbol, int candleCount = 35)
        {
            try
            {
                var candlesResponse = await _restClient.UsdFuturesApi.ExchangeData.GetKlinesAsync(
                    symbol: symbol,
                    interval: KlineInterval.OneMinute,
                    limit: candleCount
                );

                if (!candlesResponse.Success)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {candlesResponse.Error}");
                    return new List<CandleData>();
                }

                var candles = candlesResponse.Data.Select(k => new CandleData
                {
                    OpenTime = k.OpenTime,
                    Open = k.OpenPrice,
                    High = k.HighPrice,
                    Low = k.LowPrice,
                    Close = k.ClosePrice,
                    Volume = k.Volume
                }).ToList();

                return candles;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {ex.Message}");
                return new List<CandleData>();
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∏–º–≤–æ–ª–µ
        /// </summary>
        public async Task<CoinTickerData?> GetSymbolTickerAsync(string symbol)
        {
            try
            {
                var tickerResponse = await _restClient.UsdFuturesApi.ExchangeData.GetTickerAsync(symbol);
                
                if (!tickerResponse.Success)
                {
                    Console.WriteLine($"[{DateTime.UtcNow:HH:mm:ss.fff}] ‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω: {tickerResponse.Error}");
                    return null;
                }

                var ticker = tickerResponse.Data;
                return new CoinTickerData
                {
                    Symbol = ticker.Symbol,
                    Price = ticker.LastPrice,
                    QuoteVolume = ticker.QuoteVolume,
                    PriceChangePercent = ticker.PriceChangePercent
                };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.UtcNow:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç
        /// </summary>
        public async Task<Dictionary<string, List<CandleData>>> GetBatchHistoricalDataAsync(List<string> symbols, int candleCount = 35)
        {
            var result = new Dictionary<string, List<CandleData>>();
            var batchSize = 40; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìà –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤ (–ø–∞–∫–µ—Ç—ã –ø–æ {batchSize})...");

            for (int i = 0; i < symbols.Count; i += batchSize)
            {
                var batch = symbols.Skip(i).Take(batchSize).ToList();
                var tasks = batch.Select(async symbol =>
                {
                    var candles = await GetHistoricalCandlesAsync(symbol, candleCount);
                    return new { Symbol = symbol, Candles = candles };
                });

                var batchResults = await Task.WhenAll(tasks);
                
                foreach (var item in batchResults)
                {
                    result[item.Symbol] = item.Candles;
                }

                // –£–±—Ä–∞–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {Math.Min(i + batchSize, symbols.Count)}/{symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤");
            }

            var successCount = result.Values.Count(candles => candles.Count > 0);
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {successCount}/{symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤");

            return result;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞
        /// </summary>
        public async Task<decimal?> GetCurrentPriceAsync(string symbol)
        {
            try
            {
                var priceResponse = await _restClient.UsdFuturesApi.ExchangeData.GetPriceAsync(symbol);
                
                if (!priceResponse.Success)
                    return null;

                return priceResponse.Data.Price;
            }
            catch
            {
                return null;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ (tick size, min quantity –∏ —Ç.–¥.)
        /// </summary>
        public async Task<decimal?> GetTickSizeAsync(string symbol)
        {
            try
            {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ GetExchangeInfoAsync
                var exchangeInfoResponse = await _restClient.UsdFuturesApi.ExchangeData.GetExchangeInfoAsync();
                if (exchangeInfoResponse.Success && exchangeInfoResponse.Data?.Symbols != null)
                {
                    var symbolInfo = exchangeInfoResponse.Data.Symbols.FirstOrDefault(s => s.Name == symbol);
                    if (symbolInfo?.PriceFilter?.TickSize != null)
                    {
                        JsonLogger.Debug("BINANCE_DATA", "TickSize retrieved from ExchangeInfo", new Dictionary<string, object>
                        {
                            ["symbol"] = symbol,
                            ["tickSize"] = symbolInfo.PriceFilter.TickSize
                        });
                        return symbolInfo.PriceFilter.TickSize;
                    }
                }
                else
                {
                    JsonLogger.Warning("BINANCE_DATA", "ExchangeInfo request failed", new Dictionary<string, object>
                    {
                        ["symbol"] = symbol,
                        ["error"] = exchangeInfoResponse.Error?.ToString() ?? "Unknown error",
                        ["fallbackToSmartTickSize"] = true
                    });
                }

                // Fallback: —É–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç TickSize –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã
                return await GetSmartTickSizeAsync(symbol);
            }
            catch (Exception ex)
            {
                JsonLogger.Error("BINANCE_DATA", "Failed to get TickSize", new Dictionary<string, object>
                {
                    ["symbol"] = symbol,
                    ["fallbackToSmartTickSize"] = true
                }, ex);
                
                // Fallback: —É–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç TickSize
                return await GetSmartTickSizeAsync(symbol);
            }
        }

        /// <summary>
        /// –£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç TickSize –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ Binance
        /// </summary>
        private async Task<decimal> GetSmartTickSizeAsync(string symbol)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                var currentPrice = await GetCurrentPriceAsync(symbol);
                if (!currentPrice.HasValue || currentPrice.Value <= 0)
                {
                    JsonLogger.Warning("BINANCE_DATA", "Could not get current price for smart TickSize", new Dictionary<string, object>
                    {
                        ["symbol"] = symbol,
                        ["defaultTickSize"] = 0.0001m
                    });
                    return 0.0001m; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }

                var price = currentPrice.Value;
                decimal smartTickSize;

                // –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ Binance
                if (price >= 1000)
                    smartTickSize = 1m;           // BTCUSDT –∏ —Ç.–¥.
                else if (price >= 100)
                    smartTickSize = 0.1m;         // ETHUSDT –∏ —Ç.–¥.
                else if (price >= 10)
                    smartTickSize = 0.01m;        // BNBUSDT –∏ —Ç.–¥.
                else if (price >= 1)
                    smartTickSize = 0.001m;       // ADAUSDT –∏ —Ç.–¥.
                else if (price >= 0.1m)
                    smartTickSize = 0.0001m;      // DOGEUSDT –∏ —Ç.–¥.
                else if (price >= 0.01m)
                    smartTickSize = 0.00001m;     // SHIBUSDT –∏ —Ç.–¥.
                else
                    smartTickSize = 0.000001m;    // –û—á–µ–Ω—å –¥–µ—à–µ–≤—ã–µ –º–æ–Ω–µ—Ç—ã

                JsonLogger.Info("BINANCE_DATA", "Smart TickSize calculated", new Dictionary<string, object>
                {
                    ["symbol"] = symbol,
                    ["currentPrice"] = price,
                    ["smartTickSize"] = smartTickSize,
                    ["method"] = "price-based-calculation"
                });

                return smartTickSize;
            }
            catch (Exception ex)
            {
                JsonLogger.Error("BINANCE_DATA", "Smart TickSize calculation failed", new Dictionary<string, object>
                {
                    ["symbol"] = symbol,
                    ["defaultTickSize"] = 0.0001m
                }, ex);

                return 0.0001m; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏ Binance
        /// </summary>
        public async Task<Dictionary<string, BinancePosition>> GetRealPositionsAsync()
        {
            try
            {
                var positionsResponse = await _restClient.UsdFuturesApi.Account.GetPositionInformationAsync();
                if (!positionsResponse.Success)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {positionsResponse.Error}");
                    return new Dictionary<string, BinancePosition>();
                }

                var realPositions = new Dictionary<string, BinancePosition>();
                
                foreach (var position in positionsResponse.Data)
                {
                    // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ä–∞–∑–º–µ—Ä != 0)
                    if (position.Quantity != 0)
                    {
                        realPositions[position.Symbol] = new BinancePosition
                        {
                            Symbol = position.Symbol,
                            Side = position.Quantity > 0 ? "BUY" : "SELL",
                            Quantity = Math.Abs(position.Quantity),
                            EntryPrice = position.EntryPrice,
                            MarkPrice = position.MarkPrice,
                            PnL = position.UnrealizedPnl
                        };
                    }
                }

                return realPositions;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {ex.Message}");
                return new Dictionary<string, BinancePosition>();
            }
        }
    }

    /// <summary>
    /// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
    /// </summary>
    public class BinancePosition
    {
        public string Symbol { get; set; } = "";
        public string Side { get; set; } = "";
        public decimal Quantity { get; set; }
        public decimal EntryPrice { get; set; }
        public decimal MarkPrice { get; set; }
        public decimal PnL { get; set; }
    }

    /// <summary>
    /// –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    /// </summary>
    public class CoinTickerData
    {
        public string Symbol { get; set; } = "";
        public decimal Price { get; set; }
        public decimal QuoteVolume { get; set; }
        public decimal PriceChangePercent { get; set; }
    }
}
