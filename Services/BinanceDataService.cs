using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Binance.Net.Clients;
using Binance.Net.Enums;
using Models;
using Config;

namespace Services
{
    public class BinanceDataService
    {
        private readonly BinanceRestClient _restClient;
        private readonly BackendConfig _config;
        public BinanceDataService(BinanceRestClient restClient, BackendConfig config)
        {
            _restClient = restClient;
            _config = config;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –æ–±—ä–µ–º—É
        /// </summary>
        public async Task<List<CoinData>> GetFilteredUsdtPerpetualsAsync()
        {
            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –ó–∞–≥—Ä—É–∑–∫–∞ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...");

                // –ü–æ–ª—É—á–∞–µ–º 24h —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
                var tickerResponse = await _restClient.UsdFuturesApi.ExchangeData.GetTickersAsync();
                
                if (!tickerResponse.Success)
                {
                    throw new Exception($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {tickerResponse.Error}");
                }

                var filteredCoins = new List<CoinData>();

                foreach (var ticker in tickerResponse.Data)
                {
                    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                    if (!ticker.Symbol.EndsWith("USDT"))
                        continue;

                    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞
                    var volume24hUsdt = ticker.QuoteVolume;
                    if (volume24hUsdt < _config.MinVolumeUsdt)
                        continue;

                    var coinData = new CoinData
                    {
                        Symbol = ticker.Symbol,
                        Volume24h = volume24hUsdt,
                        CurrentPrice = ticker.LastPrice,
                        LastUpdated = DateTime.UtcNow,
                        RecentCandles = new List<CandleData>()
                    };

                    filteredCoins.Add(coinData);
                }

                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É (—É–±—ã–≤–∞–Ω–∏–µ)
                filteredCoins = filteredCoins
                    .OrderByDescending(c => c.Volume24h)
                    .ToList();

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ù–∞–π–¥–µ–Ω–æ {filteredCoins.Count} –º–æ–Ω–µ—Ç —Å –æ–±—ä–µ–º–æ–º >{_config.MinVolumeUsdt:N0} USDT");

                return filteredCoins;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç: {ex.Message}");
                return new List<CoinData>();
            }
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        /// </summary>
        public async Task<List<CandleData>> GetHistoricalCandlesAsync(string symbol, int candleCount = 35)
        {
            try
            {
                var candlesResponse = await _restClient.UsdFuturesApi.ExchangeData.GetKlinesAsync(
                    symbol: symbol,
                    interval: KlineInterval.OneMinute,
                    limit: candleCount
                );

                if (!candlesResponse.Success)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {candlesResponse.Error}");
                    return new List<CandleData>();
                }

                var candles = candlesResponse.Data.Select(k => new CandleData
                {
                    OpenTime = k.OpenTime,
                    Open = k.OpenPrice,
                    High = k.HighPrice,
                    Low = k.LowPrice,
                    Close = k.ClosePrice,
                    Volume = k.Volume
                }).ToList();

                return candles;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {ex.Message}");
                return new List<CandleData>();
            }
        }

        /// <summary>
        /// –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç
        /// </summary>
        public async Task<Dictionary<string, List<CandleData>>> GetBatchHistoricalDataAsync(List<string> symbols, int candleCount = 35)
        {
            var result = new Dictionary<string, List<CandleData>>();
            var batchSize = 40; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìà –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤ (–ø–∞–∫–µ—Ç—ã –ø–æ {batchSize})...");

            for (int i = 0; i < symbols.Count; i += batchSize)
            {
                var batch = symbols.Skip(i).Take(batchSize).ToList();
                var tasks = batch.Select(async symbol =>
                {
                    var candles = await GetHistoricalCandlesAsync(symbol, candleCount);
                    return new { Symbol = symbol, Candles = candles };
                });

                var batchResults = await Task.WhenAll(tasks);
                
                foreach (var item in batchResults)
                {
                    result[item.Symbol] = item.Candles;
                }

                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                if (i + batchSize < symbols.Count)
                {
                    await Task.Delay(100);
                }

                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {Math.Min(i + batchSize, symbols.Count)}/{symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤");
            }

            var successCount = result.Values.Count(candles => candles.Count > 0);
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {successCount}/{symbols.Count} —Å–∏–º–≤–æ–ª–æ–≤");

            return result;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞
        /// </summary>
        public async Task<decimal?> GetCurrentPriceAsync(string symbol)
        {
            try
            {
                var priceResponse = await _restClient.UsdFuturesApi.ExchangeData.GetPriceAsync(symbol);
                
                if (!priceResponse.Success)
                    return null;

                return priceResponse.Data.Price;
            }
            catch
            {
                return null;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ (tick size, min quantity –∏ —Ç.–¥.)
        /// </summary>
        public async Task<decimal?> GetTickSizeAsync(string symbol)
        {
            try
            {
                var exchangeInfoResponse = await _restClient.UsdFuturesApi.ExchangeData.GetExchangeInfoAsync();
                if (!exchangeInfoResponse.Success)
                    return null;

                var symbolInfo = exchangeInfoResponse.Data.Symbols.FirstOrDefault(s => s.Name == symbol);
                if (symbolInfo == null)
                    return null;

                var priceFilter = symbolInfo.PriceFilter;
                return priceFilter?.TickSize;
            }
            catch
            {
                return null;
            }
        }
    }
}
