using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.Extensions.Configuration;
using Binance.Net.Clients;
using CryptoExchange.Net.Authentication;
using Services;
using Config;
using Models;

namespace Testing
{
    /// <summary>
    /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    /// </summary>
    public class UniversalTester
    {
        public static async Task TestCoinPoolAsync()
        {
            Console.WriteLine("üöÄ –¢–ï–°–¢ 1: –°–ë–û–† –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–£–õ–ê –ú–û–ù–ï–¢");
            Console.WriteLine("======================================");
            Console.WriteLine("üéØ –¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä –º–æ–Ω–µ—Ç —Å Binance –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –æ–±—ä–µ–º—É/–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏");
            Console.WriteLine();

            try
            {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                LoadEnvFile();

                var apiKey = Environment.GetEnvironmentVariable("BINANCE_API_KEY");
                var apiSecret = Environment.GetEnvironmentVariable("BINANCE_API_SECRET");

                if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(apiSecret))
                {
                    Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ");
                    return;
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                var configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("config.json", optional: false, reloadOnChange: true)
                    .Build();

                var backendConfig = BackendConfig.LoadFromConfiguration(configuration);

                Console.WriteLine($"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:");
                Console.WriteLine($"   üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: {backendConfig.MinVolumeUsdt:N0} USDT");
                Console.WriteLine($"   üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {backendConfig.MinNatrPercent}%");
                Console.WriteLine($"   üìÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π: {backendConfig.HistoryCandles}");
                Console.WriteLine();

                // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
                var restClient = new BinanceRestClient(options =>
                {
                    options.ApiCredentials = new ApiCredentials(apiKey, apiSecret);
                });

                var dataStorage = new DataStorageService();
                var binanceService = new BinanceDataService(restClient, backendConfig);
                var universeService = new UniverseUpdateService(binanceService, dataStorage, backendConfig);

                Console.WriteLine("üìä –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç");
                Console.WriteLine("=====================================");

                var result = await universeService.UpdateUniverseAsync();

                if (result.Success)
                {
                    var filteredCoins = dataStorage.GetFilteredCoins(backendConfig.MinVolumeUsdt, backendConfig.MinNatrPercent);
                    
                    Console.WriteLine("‚úÖ –¢–ï–°–¢ –ü–£–õ–ê –ú–û–ù–ï–¢ –£–°–ü–ï–®–ï–ù!");
                    Console.WriteLine($"üìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {result.TotalCoinsFound} –º–æ–Ω–µ—Ç");
                    Console.WriteLine($"üìä –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã: {filteredCoins.Count} –º–æ–Ω–µ—Ç");
                    Console.WriteLine($"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.Duration.TotalSeconds:F1} —Å–µ–∫");
                    
                    Console.WriteLine();
                    Console.WriteLine("üèÜ –¢–æ–ø-10 –º–æ–Ω–µ—Ç –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:");
                    foreach (var coin in filteredCoins.Take(10))
                    {
                        Console.WriteLine($"   {coin.Symbol}: NATR={coin.Natr:F2}%, –æ–±—ä–µ–º={coin.Volume24h:N0} USDT");
                    }
                }
                else
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
            }

            Console.WriteLine();
            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadKey();
        }

        public static async Task TestWebSocketAsync()
        {
            Console.WriteLine("üì° –¢–ï–°–¢ 2: WEBSOCKET –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø");
            Console.WriteLine("===============================");
            Console.WriteLine("üéØ –¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –∏ —Å–≤–µ—á–µ–π");
            Console.WriteLine();

            try
            {
                LoadEnvFile();
                var apiKey = Environment.GetEnvironmentVariable("BINANCE_API_KEY");
                var apiSecret = Environment.GetEnvironmentVariable("BINANCE_API_SECRET");

                if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(apiSecret))
                {
                    Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ");
                    return;
                }

                var configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("config.json", optional: false, reloadOnChange: true)
                    .Build();

                var backendConfig = BackendConfig.LoadFromConfiguration(configuration);

                // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
                var restClient = new BinanceRestClient(options =>
                {
                    options.ApiCredentials = new ApiCredentials(apiKey, apiSecret);
                });

                var socketClient = new BinanceSocketClient(options =>
                {
                    options.ApiCredentials = new ApiCredentials(apiKey, apiSecret);
                });

                var dataStorage = new DataStorageService();
                var binanceService = new BinanceDataService(restClient, backendConfig);
                var universeService = new UniverseUpdateService(binanceService, dataStorage, backendConfig);
                var webSocketService = new MultiSymbolWebSocketService(socketClient, dataStorage, backendConfig);

                // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—É–ª –º–æ–Ω–µ—Ç
                Console.WriteLine("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
                var result = await universeService.UpdateUniverseAsync();
                if (!result.Success)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {result.ErrorMessage}");
                    return;
                }

                var filteredCoins = dataStorage.GetFilteredCoins(backendConfig.MinVolumeUsdt, backendConfig.MinNatrPercent);
                var testSymbols = filteredCoins.Take(5).Select(c => c.Symbol).ToList();

                Console.WriteLine($"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {testSymbols.Count} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è WebSocket —Ç–µ—Å—Ç–∞");
                Console.WriteLine($"üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {string.Join(", ", testSymbols)}");
                Console.WriteLine();

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                var priceUpdates = 0;
                var candleUpdates = 0;
                var natrUpdates = 0;

                webSocketService.OnPriceUpdate += (symbol, price) =>
                {
                    priceUpdates++;
                    if (priceUpdates % 10 == 0)
                    {
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üí∞ {symbol}: —Ü–µ–Ω–∞={price:F6} (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {priceUpdates})");
                    }
                };

                webSocketService.OnCandleUpdate += (symbol, candle) =>
                {
                    candleUpdates++;
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üïê {symbol}: –Ω–æ–≤–∞—è —Å–≤–µ—á–∞, —Ü–µ–Ω–∞={candle.Close:F6}");
                };

                webSocketService.OnNatrUpdate += (symbol, natr) =>
                {
                    natrUpdates++;
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìà {symbol}: NATR –æ–±–Ω–æ–≤–ª–µ–Ω={natr:F2}%");
                };

                // –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
                Console.WriteLine("üöÄ –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...");
                await webSocketService.StartAsync(testSymbols);

                Console.WriteLine("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WebSocket (30 —Å–µ–∫—É–Ω–¥)...");
                Console.WriteLine("(–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)");

                var cts = new CancellationTokenSource();
                Console.CancelKeyPress += (sender, e) =>
                {
                    e.Cancel = true;
                    cts.Cancel();
                    Console.WriteLine("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...");
                };

                try
                {
                    await Task.Delay(30000, cts.Token);
                }
                catch (OperationCanceledException)
                {
                    Console.WriteLine("‚èπÔ∏è WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
                }

                await webSocketService.StopAsync();

                Console.WriteLine();
                Console.WriteLine("‚úÖ –¢–ï–°–¢ WEBSOCKET –ó–ê–í–ï–†–®–ï–ù!");
                Console.WriteLine($"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
                Console.WriteLine($"   üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω: {priceUpdates}");
                Console.WriteLine($"   üïê –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–≤–µ—á–µ–π: {candleUpdates}");
                Console.WriteLine($"   üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–π NATR: {natrUpdates}");

                if (priceUpdates > 50 && candleUpdates > 0)
                {
                    Console.WriteLine("üéâ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!");
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ WebSocket —Ç–µ—Å—Ç–∞: {ex.Message}");
            }

            Console.WriteLine();
            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadKey();
        }

        public static async Task TestStrategyAsync()
        {
            Console.WriteLine("üß† –¢–ï–°–¢ 3: –¢–û–†–ì–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø");
            Console.WriteLine("=============================");
            Console.WriteLine("üéØ –¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤");
            Console.WriteLine();

            try
            {
                LoadEnvFile();
                var apiKey = Environment.GetEnvironmentVariable("BINANCE_API_KEY");
                var apiSecret = Environment.GetEnvironmentVariable("BINANCE_API_SECRET");

                if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(apiSecret))
                {
                    Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ");
                    return;
                }

                var configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("config.json", optional: false, reloadOnChange: true)
                    .Build();

                var backendConfig = BackendConfig.LoadFromConfiguration(configuration);

                // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
                var restClient = new BinanceRestClient(options =>
                {
                    options.ApiCredentials = new ApiCredentials(apiKey, apiSecret);
                });

                var dataStorage = new DataStorageService();
                var binanceService = new BinanceDataService(restClient, backendConfig);
                var universeService = new UniverseUpdateService(binanceService, dataStorage, backendConfig);
                var strategyService = new TradingStrategyService(backendConfig);

                Console.WriteLine("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...");
                var result = await universeService.UpdateUniverseAsync();
                if (!result.Success)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {result.ErrorMessage}");
                    return;
                }

                var filteredCoins = dataStorage.GetFilteredCoins(backendConfig.MinVolumeUsdt, backendConfig.MinNatrPercent);
                Console.WriteLine($"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {filteredCoins.Count} –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");

                Console.WriteLine();
                Console.WriteLine("üß† –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...");
                Console.WriteLine("============================");

                var longSignals = new List<StrategyResult>();
                var shortSignals = new List<StrategyResult>();
                var flatSignals = new List<StrategyResult>();

                foreach (var coin in filteredCoins)
                {
                    var signal = strategyService.AnalyzeCoin(coin);
                    
                    switch (signal.FinalSignal)
                    {
                        case "LONG":
                            longSignals.Add(signal);
                            Console.WriteLine($"üü¢ LONG:  {signal.Symbol} - Z={signal.ZScore:F2}({signal.ZScoreSignal}), SMA={signal.Sma:F6}({signal.SmaSignal}), —Ü–µ–Ω–∞={signal.CurrentPrice:F6}");
                            break;
                        case "SHORT":
                            shortSignals.Add(signal);
                            Console.WriteLine($"üî¥ SHORT: {signal.Symbol} - Z={signal.ZScore:F2}({signal.ZScoreSignal}), SMA={signal.Sma:F6}({signal.SmaSignal}), —Ü–µ–Ω–∞={signal.CurrentPrice:F6}");
                            break;
                        default:
                            flatSignals.Add(signal);
                            // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 FLAT —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è debug
                            if (flatSignals.Count <= 3)
                            {
                                Console.WriteLine($"‚ö™ FLAT:  {signal.Symbol} - Z={signal.ZScore:F2}({signal.ZScoreSignal}), SMA={signal.Sma:F6}({signal.SmaSignal}), —Ü–µ–Ω–∞={signal.CurrentPrice:F6} - {signal.Reason}");
                            }
                            break;
                    }
                }

                Console.WriteLine();
                Console.WriteLine("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –°–¢–†–ê–¢–ï–ì–ò–ò:");
                Console.WriteLine($"   üü¢ LONG —Å–∏–≥–Ω–∞–ª–æ–≤: {longSignals.Count}");
                Console.WriteLine($"   üî¥ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤: {shortSignals.Count}");
                Console.WriteLine($"   ‚ö™ FLAT —Å–∏–≥–Ω–∞–ª–æ–≤: {flatSignals.Count}");
                Console.WriteLine($"   üìà –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {filteredCoins.Count} –º–æ–Ω–µ—Ç");

                var activeSignals = longSignals.Count + shortSignals.Count;
                var signalRate = (double)activeSignals / filteredCoins.Count * 100;

                Console.WriteLine($"   üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {signalRate:F1}%");

                if (activeSignals >= 3)
                {
                    Console.WriteLine("üéâ –°–¢–†–ê–¢–ï–ì–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!");
                    Console.WriteLine("‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã");
                }
                else if (activeSignals >= 1)
                {
                    Console.WriteLine("üëç –°–¢–†–ê–¢–ï–ì–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ù–û–†–ú–ê–õ–¨–ù–û");
                    Console.WriteLine("‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã");
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è –ù–ò–ó–ö–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –°–¢–†–ê–¢–ï–ì–ò–ò");
                    Console.WriteLine("üí° –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –±–æ–ª–µ–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {ex.Message}");
            }

            Console.WriteLine();
            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadKey();
        }

        public static async Task TestHftSystemAsync()
        {
            Console.WriteLine("‚ö° –¢–ï–°–¢ 4: –ü–°–ï–í–î–û-HFT –°–ò–°–¢–ï–ú–ê");
            Console.WriteLine("=============================");
            Console.WriteLine("üéØ –¶–µ–ª—å: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤");
            Console.WriteLine();

            try
            {
                LoadEnvFile();
                var apiKey = Environment.GetEnvironmentVariable("BINANCE_API_KEY");
                var apiSecret = Environment.GetEnvironmentVariable("BINANCE_API_SECRET");

                if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(apiSecret))
                {
                    Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ");
                    return;
                }

                var configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("config.json", optional: false, reloadOnChange: true)
                    .Build();

                var backendConfig = BackendConfig.LoadFromConfiguration(configuration);

                // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
                var restClient = new BinanceRestClient(options =>
                {
                    options.ApiCredentials = new ApiCredentials(apiKey, apiSecret);
                });

                var socketClient = new BinanceSocketClient(options =>
                {
                    options.ApiCredentials = new ApiCredentials(apiKey, apiSecret);
                });

                var dataStorage = new DataStorageService();
                var binanceService = new BinanceDataService(restClient, backendConfig);
                var universeService = new UniverseUpdateService(binanceService, dataStorage, backendConfig);
                var strategyService = new TradingStrategyService(backendConfig);
                var webSocketService = new MultiSymbolWebSocketService(socketClient, dataStorage, backendConfig);
                var hftEngine = new HftSignalEngineService(strategyService, dataStorage, backendConfig);

                // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                Console.WriteLine("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è HFT...");
                var result = await universeService.UpdateUniverseAsync();
                if (!result.Success)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {result.ErrorMessage}");
                    return;
                }

                var filteredCoins = dataStorage.GetFilteredCoins(backendConfig.MinVolumeUsdt, backendConfig.MinNatrPercent);
                var topSymbols = filteredCoins.Take(10).Select(c => c.Symbol).ToList();

                Console.WriteLine($"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {topSymbols.Count} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è HFT");

                // –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –∏ HFT
                await webSocketService.StartAsync(topSymbols);

                // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WebSocket –¥–ª—è real-time —Ü–µ–Ω
                webSocketService.OnPriceUpdate += (symbol, price) =>
                {
                    hftEngine.UpdatePrice(symbol, price);
                };

                var hftEvents = 0;
                hftEngine.OnHftSignalChange += (hftEvent) =>
                {
                    hftEvents++;
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö° HFT: {hftEvent.Symbol} {hftEvent.OldSignal}‚Üí{hftEvent.NewSignal} ({hftEvent.LatencyMs}ms)");
                };

                await hftEngine.StartAsync();

                Console.WriteLine("‚ö° HFT –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô...");
                Console.WriteLine("(–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–≥–¥–∞ —É–≤–∏–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã)");

                var cts = new CancellationTokenSource();
                Console.CancelKeyPress += (sender, e) =>
                {
                    e.Cancel = true;
                    cts.Cancel();
                    Console.WriteLine("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ HFT...");
                };

                try
                {
                    // –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –¥–æ Ctrl+C
                    await Task.Delay(-1, cts.Token);
                }
                catch (OperationCanceledException)
                {
                    Console.WriteLine("‚èπÔ∏è HFT –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
                }

                var finalStats = hftEngine.GetPerformanceStats();
                await hftEngine.StopAsync();
                await webSocketService.StopAsync();

                Console.WriteLine();
                Console.WriteLine("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ HFT –¢–ï–°–¢–ê:");
                Console.WriteLine($"   ‚ö° –ê–Ω–∞–ª–∏–∑–æ–≤/—Å–µ–∫: {finalStats.AnalysesPerSecond:F0}");
                Console.WriteLine($"   üìà –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {finalStats.AverageLatencyMs:F1}–º—Å");
                Console.WriteLine($"   üéØ HFT —Å–æ–±—ã—Ç–∏–π: {hftEvents}");
                Console.WriteLine($"   ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finalStats.Uptime.TotalMinutes:F1} –º–∏–Ω");

                if (finalStats.AnalysesPerSecond >= 50 && finalStats.AverageLatencyMs <= 5)
                {
                    Console.WriteLine("üèÜ HFT –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ï–í–û–°–•–û–î–ù–û!");
                }
                else if (finalStats.AnalysesPerSecond >= 20)
                {
                    Console.WriteLine("‚úÖ HFT –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –•–û–†–û–®–û!");
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è HFT —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–∞–∑–æ–≤–æ");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ HFT —Ç–µ—Å—Ç–∞: {ex.Message}");
            }

            Console.WriteLine();
            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadKey();
        }

        public static async Task TestAutoTradingAsync()
        {
            Console.WriteLine("ü§ñ –¢–ï–°–¢ 5: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê");
            Console.WriteLine("==========================================");
            Console.WriteLine("üéØ –¶–µ–ª—å: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ HFT —Å —Ç–æ—Ä–≥–æ–≤—ã–º –º–æ–¥—É–ª–µ–º");
            Console.WriteLine();

            try
            {
                LoadEnvFile();
                var apiKey = Environment.GetEnvironmentVariable("BINANCE_API_KEY");
                var apiSecret = Environment.GetEnvironmentVariable("BINANCE_API_SECRET");

                if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(apiSecret))
                {
                    Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ");
                    return;
                }

                var configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("config.json", optional: false, reloadOnChange: true)
                    .Build();

                var backendConfig = BackendConfig.LoadFromConfiguration(configuration);
                var tradingConfig = TradingConfig.LoadFromConfiguration(configuration);
                var autoTradingConfig = AutoTradingConfig.LoadFromConfiguration(configuration);

                Console.WriteLine($"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏:");
                Console.WriteLine($"   üéØ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π: {autoTradingConfig.MaxConcurrentPositions}");
                Console.WriteLine($"   üí∞ –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞: {tradingConfig.UsdAmount} USDT");
                Console.WriteLine($"   üéØ Take Profit: {tradingConfig.TakeProfitPercent}%");
                Console.WriteLine($"   üõ°Ô∏è Stop Loss: {tradingConfig.StopLossPercent}%");
                Console.WriteLine($"   ‚è∞ –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏: {autoTradingConfig.MinTimeBetweenTradesMinutes} –º–∏–Ω—É—Ç");
                Console.WriteLine($"   ‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {autoTradingConfig.MinSignalStrength}");
                Console.WriteLine($"   üîò –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: {(autoTradingConfig.EnableAutoTrading ? "–í–∫–ª—é—á–µ–Ω–∞" : "–û—Ç–∫–ª—é—á–µ–Ω–∞")}");
                Console.WriteLine();

                // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
                var restClient = new BinanceRestClient(options =>
                {
                    options.ApiCredentials = new ApiCredentials(apiKey, apiSecret);
                });

                var socketClient = new BinanceSocketClient(options =>
                {
                    options.ApiCredentials = new ApiCredentials(apiKey, apiSecret);
                });

                var dataStorage = new DataStorageService();
                var binanceService = new BinanceDataService(restClient, backendConfig);
                var universeService = new UniverseUpdateService(binanceService, dataStorage, backendConfig);
                var strategyService = new TradingStrategyService(backendConfig);
                var webSocketService = new MultiSymbolWebSocketService(socketClient, dataStorage, backendConfig);
                var hftEngine = new HftSignalEngineService(strategyService, dataStorage, backendConfig);

                                // –°–æ–∑–¥–∞–µ–º StateManager –¥–ª—è –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
                var stateManager = new SimpleStateManager();

                // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                var autoTradingService = new AutoTradingService(
                    hftEngine, dataStorage, universeService, webSocketService,
                    strategyService, backendConfig, tradingConfig, autoTradingConfig, restClient, socketClient, stateManager);

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                var signalsReceived = 0;
                var tradesOpened = 0;
                var tradesClosed = 0;

                autoTradingService.OnSignalReceived += (symbol, signal, strategy) =>
                {
                    signalsReceived++;
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üì° –°–∏–≥–Ω–∞–ª #{signalsReceived}: {symbol} {signal}");
                };

                autoTradingService.OnTradeOpened += (symbol, signal) =>
                {
                    tradesOpened++;
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –°–¥–µ–ª–∫–∞ #{tradesOpened}: {symbol} {signal}");
                };

                autoTradingService.OnTradeClosed += (symbol, result) =>
                {
                    tradesClosed++;
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üèÅ –ó–∞–∫—Ä—ã—Ç–æ #{tradesClosed}: {symbol} - {result}");
                };

                autoTradingService.OnError += (error) =>
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞: {error}");
                };

                Console.WriteLine("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...");
                var started = await autoTradingService.StartAsync();
                
                if (!started)
                {
                    Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏");
                    return;
                }

                Console.WriteLine("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ (120 —Å–µ–∫—É–Ω–¥)...");
                Console.WriteLine("(–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)");
                Console.WriteLine();

                var cts = new CancellationTokenSource();
                Console.CancelKeyPress += (sender, e) =>
                {
                    e.Cancel = true;
                    cts.Cancel();
                    Console.WriteLine("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏...");
                };

                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                var monitoringTask = Task.Run(async () =>
                {
                    var reportInterval = TimeSpan.FromSeconds(30);
                    var lastReport = DateTime.UtcNow;

                    while (!cts.Token.IsCancellationRequested)
                    {
                        await Task.Delay(5000, cts.Token);

                        if (DateTime.UtcNow - lastReport >= reportInterval)
                        {
                            var stats = autoTradingService.GetStats();
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–í–¢–û–¢–û–†–ì–û–í–õ–ò:");
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.Uptime.TotalMinutes:F1} –º–∏–Ω");
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signalsReceived}");
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üöÄ –û—Ç–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {tradesOpened}");
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {stats.ActivePositions}/{stats.MaxPositions}");
                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}]    üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–≤: {stats.TotalSymbolsTracked}");
                            Console.WriteLine();
                            
                            lastReport = DateTime.UtcNow;
                        }
                    }
                });

                try
                {
                    await Task.Delay(120000, cts.Token);
                }
                catch (OperationCanceledException)
                {
                    Console.WriteLine("‚èπÔ∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
                }

                await autoTradingService.StopAsync();

                Console.WriteLine();
                Console.WriteLine("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ê–í–¢–û–¢–û–†–ì–û–í–õ–ò:");
                Console.WriteLine($"   üì° –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signalsReceived}");
                Console.WriteLine($"   üöÄ –û—Ç–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {tradesOpened}");
                Console.WriteLine($"   üèÅ –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {tradesClosed}");

                if (signalsReceived >= 1)
                {
                    Console.WriteLine("üéâ –ê–í–¢–û–¢–û–†–ì–û–í–õ–Ø –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!");
                    Console.WriteLine("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞");
                    
                    if (tradesOpened >= 1)
                    {
                        Console.WriteLine("üèÜ –ü–û–ó–ò–¶–ò–ò –û–¢–ö–†–´–í–ê–Æ–¢–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!");
                    }
                    else
                    {
                        Console.WriteLine("üí° –°–∏–≥–Ω–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –∂–µ—Å—Ç–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã)");
                    }
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ, —Ä—ã–Ω–æ–∫ —Å–ø–æ–∫–æ–π–Ω—ã–π");
                    Console.WriteLine("‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏: {ex.Message}");
            }

            Console.WriteLine();
            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadKey();
        }

        public static async Task RunAllTestsAsync()
        {
            Console.WriteLine("üöÄ –ü–û–õ–ù–´–ô –ù–ê–ë–û–† –¢–ï–°–¢–û–í –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´");
            Console.WriteLine("=======================================");
            Console.WriteLine();

            await TestCoinPoolAsync();
            await TestWebSocketAsync();
            await TestStrategyAsync();
            await TestHftSystemAsync();
            await TestAutoTradingAsync();

            Console.WriteLine();
            Console.WriteLine("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!");
            Console.WriteLine("======================");
            Console.WriteLine("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ!");
        }

        private static void LoadEnvFile()
        {
            try
            {
                if (!File.Exists(".env")) return;
                var lines = File.ReadAllLines(".env");
                foreach (var raw in lines)
                {
                    var line = raw.Trim();
                    if (string.IsNullOrWhiteSpace(line) || line.StartsWith("#")) continue;
                    var idx = line.IndexOf('=');
                    if (idx <= 0) continue;
                    var key = line.Substring(0, idx).Trim();
                    var val = line.Substring(idx + 1).Trim().Trim('"');
                    Environment.SetEnvironmentVariable(key, val);
                }
            }
            catch { }
        }
    }
}
