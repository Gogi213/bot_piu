using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Binance.Net.Clients;
using CryptoExchange.Net.Authentication;
using Config;
using Models;
using Services;

public class DebugStrategy
{
    public static async Task TestStrategyDebugAsync()
    {
        Console.WriteLine("üß† DEBUG –°–¢–†–ê–¢–ï–ì–ò–ò");
        Console.WriteLine("==================");
        
        try
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            LoadEnvFile();

            var apiKey = Environment.GetEnvironmentVariable("BINANCE_API_KEY");
            var apiSecret = Environment.GetEnvironmentVariable("BINANCE_API_SECRET");

            if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(apiSecret))
            {
                Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ");
                return;
            }

            var configuration = new ConfigurationBuilder()
                .SetBasePath(System.IO.Directory.GetCurrentDirectory())
                .AddJsonFile("config.json", optional: false, reloadOnChange: true)
                .Build();

            var backendConfig = BackendConfig.LoadFromConfiguration(configuration);

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
            var restClient = new BinanceRestClient(options =>
            {
                options.ApiCredentials = new ApiCredentials(apiKey, apiSecret);
            });

            var dataStorage = new DataStorageService();
            var binanceService = new BinanceDataService(restClient, backendConfig);
            var universeService = new UniverseUpdateService(binanceService, dataStorage, backendConfig);
            var strategyService = new TradingStrategyService(backendConfig);

            Console.WriteLine("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
            var result = await universeService.UpdateUniverseAsync();
            if (!result.Success)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {result.ErrorMessage}");
                return;
            }

            var filteredCoins = dataStorage.GetFilteredCoins(backendConfig.MinVolumeUsdt, backendConfig.MinNatrPercent);
            Console.WriteLine($"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {filteredCoins.Count} –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");

            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ
            if (filteredCoins.Count > 0)
            {
                var coin = filteredCoins.First();
                Console.WriteLine($"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: {coin.Symbol}");
                Console.WriteLine($"   üí∞ –¶–µ–Ω–∞: {coin.CurrentPrice:F6}");
                Console.WriteLine($"   üìä NATR: {coin.Natr:F2}%");
                Console.WriteLine($"   üïê –°–≤–µ—á–µ–π: {coin.RecentCandles.Count}");
                
                if (coin.RecentCandles.Count >= 20)
                {
                    // Z-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
                    var (zScore, zScoreSignal) = TechnicalAnalysisService.CalculateZScoreSma(
                        coin.RecentCandles, 
                        backendConfig.ZScoreSmaPeriod, 
                        backendConfig.ZScoreThreshold);
                    
                    Console.WriteLine($"   üéØ Z-Score: {zScore:F4} ‚Üí {zScoreSignal}");
                    Console.WriteLine($"   üìà Z-Threshold: {backendConfig.ZScoreThreshold}");
                    
                    // SMA —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
                    var (sma, smaSignal) = TechnicalAnalysisService.CalculateSmaStrategy(
                        coin.RecentCandles, 
                        backendConfig.StrategySmaPeriod);
                    
                    Console.WriteLine($"   üìä SMA: {sma:F6} ‚Üí {smaSignal}");
                    Console.WriteLine($"   üìà –¶–µ–Ω–∞ vs SMA: {(coin.CurrentPrice > sma ? "–í–´–®–ï" : "–ù–ò–ñ–ï")}");
                    
                    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    var strategyResult = strategyService.AnalyzeCoin(coin);
                    Console.WriteLine($"   üèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ: {strategyResult.FinalSignal}");
                    Console.WriteLine($"   üí≠ –ü—Ä–∏—á–∏–Ω–∞: {strategyResult.Reason}");
                }
                else
                {
                    Console.WriteLine($"   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
                }
            }
            else
            {
                Console.WriteLine("‚ùå –ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
            Console.WriteLine($"Stack: {ex.StackTrace}");
        }
        
        Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É...");
        Console.ReadKey();
    }
    
    private static void LoadEnvFile()
    {
        var envFile = ".env";
        if (System.IO.File.Exists(envFile))
        {
            foreach (var line in System.IO.File.ReadAllLines(envFile))
            {
                if (!string.IsNullOrWhiteSpace(line) && !line.StartsWith("#"))
                {
                    var parts = line.Split('=', 2);
                    if (parts.Length == 2)
                    {
                        Environment.SetEnvironmentVariable(parts[0].Trim(), parts[1].Trim());
                    }
                }
            }
        }
    }
}
