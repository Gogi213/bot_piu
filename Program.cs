using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.IO;
using Binance.Net;
using Binance.Net.Clients;
using CryptoExchange.Net.Authentication;
using Trading;
using Config;
using Testing;
using Microsoft.Extensions.Configuration;
using Services;
using Services.OBIZScore;
using Services.OBIZScore.Config;
using Models;

class Program
{
    static void LoadEnvFile()
    {
        try
        {
            if (!File.Exists(".env")) return;
            var lines = File.ReadAllLines(".env");
            foreach (var raw in lines)
            {
                var line = raw.Trim();
                if (string.IsNullOrWhiteSpace(line) || line.StartsWith("#")) continue;
                var idx = line.IndexOf('=');
                if (idx <= 0) continue;
                var key = line.Substring(0, idx).Trim();
                var val = line.Substring(idx + 1).Trim().Trim('"');
                Environment.SetEnvironmentVariable(key, val);
            }
        }
        catch { }
    }

    static async Task Main(string[] args)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        if (args.Length > 0)
        {
            switch (args[0].ToLower())
            {
                case "test-pool":
                    await UniversalTester.TestCoinPoolAsync();
                    return;
                
                case "test-websocket":
                    await UniversalTester.TestWebSocketAsync();
                    return;
                
                case "test-strategy":
                    await UniversalTester.TestStrategyAsync();
                    return;
                
                case "test-hft":
                    await UniversalTester.TestHftSystemAsync();
                    return;
                
                case "test-auto":
                    await UniversalTester.TestAutoTradingAsync();
                    return;
                
                case "test-all":
                    await UniversalTester.RunAllTestsAsync();
                    return;
                
                case "test-coins":
                    await TestCoinSelectionAsync();
                    return;
                
                case "test-obiz":
                    await TestOBIZStrategyAsync();
                    return;
                
                case "test-components":
                    await TestOBIZComponentsAsync();
                    return;
                    
                default:
                    Console.WriteLine("üöÄ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:");
                    Console.WriteLine("==================================");
                    Console.WriteLine("  test-pool       - –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É–ª–∞ –º–æ–Ω–µ—Ç");
                    Console.WriteLine("  test-websocket  - –¢–µ—Å—Ç WebSocket real-time –¥–∞–Ω–Ω—ã—Ö");
                    Console.WriteLine("  test-strategy   - –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤");
                    Console.WriteLine("  test-hft        - –¢–µ—Å—Ç –ø—Å–µ–≤–¥–æ-HFT —Å–∏—Å—Ç–µ–º—ã");
                    Console.WriteLine("  test-auto       - –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏");
                    Console.WriteLine("  test-all        - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ");
                    Console.WriteLine("  test-coins      - –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏");
                    Console.WriteLine("  test-obiz       - –¢–µ—Å—Ç OBIZ-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏");
                    Console.WriteLine("  test-components - –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OBIZ (trades, orderbook, websockets)");
                    Console.WriteLine();
                    Console.WriteLine("üí° –î–ª—è –æ–±—ã—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
                    return;
            }
        }

        // –ê–í–¢–û–ù–û–ú–ù–´–ô –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        LoadEnvFile();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
        var apiKey = Environment.GetEnvironmentVariable("BINANCE_API_KEY");
        var apiSecret = Environment.GetEnvironmentVariable("BINANCE_API_SECRET");

        JsonLogger.SystemEvent("SYSTEM_START", "Bot system started", new Dictionary<string, object>
        {
            ["hasApiKeys"] = !string.IsNullOrEmpty(apiKey) && !string.IsNullOrEmpty(apiSecret),
            ["startTime"] = DateTime.UtcNow
        });

        if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(apiSecret))
        {
            Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ");
            Console.WriteLine("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞ –º–æ–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dotnet run test-pool");
            return;
        }

        Console.WriteLine("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ù–û–ú–ù–û–ô –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´");
        Console.WriteLine("=====================================");
        Console.WriteLine("ü§ñ –†–µ–∂–∏–º: –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ù–û–ú–ù–û–°–¢–¨");
        Console.WriteLine("üîÑ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–ö–õ–Æ–ß–ï–ù–û");
        Console.WriteLine("üíæ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –í–ö–õ–Æ–ß–ï–ù–û");
        Console.WriteLine("üõ°Ô∏è –ù–∞–¥–µ–∂–Ω—ã–µ WebSocket: –í–ö–õ–Æ–ß–ï–ù–´");
        Console.WriteLine();

        // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–≤–∏–∂–æ–∫
        var autonomousEngine = new AutonomousEngine(apiKey, apiSecret);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        var cts = new CancellationTokenSource();
        Console.CancelKeyPress += (s, e) =>
        {
            e.Cancel = true;
            Console.WriteLine();
            Console.WriteLine("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...");
            autonomousEngine.Stop();
            cts.Cancel();
        };

        try
        {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–≤–∏–∂–æ–∫
            var autonomousTask = autonomousEngine.StartAsync();
            
            // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            var delayTask = Task.Delay(-1, cts.Token);
            
            await Task.WhenAny(autonomousTask, delayTask);
            
            // –ï—Å–ª–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–∞–º - –∂–¥–µ–º –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if (autonomousTask.IsCompleted)
            {
                await autonomousTask;
            }
            else
            {
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ Ctrl+C - –∂–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–≤–∏–∂–∫–∞
                try
                {
                    await autonomousTask;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {ex.Message}");
                }
            }
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        var uptime = DateTime.UtcNow - DateTime.UtcNow; // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.TotalHours:F1} —á–∞—Å–æ–≤");
        
        Console.WriteLine("‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç
    /// </summary>
    static async Task TestCoinSelectionAsync()
    {
        LoadEnvFile();
        
        Console.WriteLine("üéØ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –í–´–ë–û–†–ê –ú–û–ù–ï–¢");
        Console.WriteLine("=============================");
        
        try
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("config.json", optional: false, reloadOnChange: true)
                .Build();

            var backendConfig = BackendConfig.LoadFromConfiguration(configuration);
            var coinSelectionConfig = CoinSelectionConfig.LoadFromConfiguration(configuration);

            Console.WriteLine($"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞: {coinSelectionConfig}");
            Console.WriteLine();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã (–±–µ–∑ API –∫–ª—é—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            var restClient = new BinanceRestClient();
            var dataStorage = new DataStorageService();
            var binanceDataService = new BinanceDataService(restClient, backendConfig);
            
            var coinSelectionService = new CoinSelectionService(
                coinSelectionConfig,
                backendConfig,
                dataStorage,
                binanceDataService);

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –º–æ–Ω–µ—Ç
            Console.WriteLine("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏...");
            var result = await coinSelectionService.GetTradingCoinsAsync();

            if (result.Success)
            {
                Console.WriteLine($"‚úÖ {result}");
                Console.WriteLine($"üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã ({result.SelectedCoins.Count}):");
                
                foreach (var coin in result.SelectedCoins.Take(10)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                {
                    Console.WriteLine($"   üí∞ {coin.Symbol}: {coin.CurrentPrice:F4} USDT | Volume: {coin.Volume24h:N0}");
                }
                
                if (result.SelectedCoins.Count > 10)
                {
                    Console.WriteLine($"   ... –∏ –µ—â–µ {result.SelectedCoins.Count - 10} –º–æ–Ω–µ—Ç");
                }

                if (result.MissingSymbols.Any())
                {
                    Console.WriteLine($"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã: {string.Join(", ", result.MissingSymbols)}");
                }
            }
            else
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
        }
        
        Console.WriteLine();
        Console.WriteLine("‚úÖ –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OBIZ-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    /// </summary>
    static async Task TestOBIZStrategyAsync()
    {
        Console.WriteLine("üß† –¢–ï–°–¢ OBIZ-SCORE –°–¢–†–ê–¢–ï–ì–ò–ò");
        Console.WriteLine("=============================");
        
        try
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("config.json", optional: false, reloadOnChange: true)
                .Build();

            var obizConfig = OBIZStrategyConfig.LoadFromConfiguration(configuration);
            var strategyConfig = StrategyConfig.LoadFromConfiguration(configuration);

            Console.WriteLine($"üìä OBIZ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {obizConfig}");
            Console.WriteLine($"üéØ –†–µ–∂–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategyConfig.Mode}");
            Console.WriteLine($"‚úÖ OBIZ –≤–∫–ª—é—á–µ–Ω–∞: {strategyConfig.EnableOBIZStrategy}");
            Console.WriteLine();

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            var test = new OBIZIntegrationTest();
            var results = await test.RunFullIntegrationTestAsync();

            Console.WriteLine();
            Console.WriteLine("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:");
            Console.WriteLine($"   –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {(results.BasicComponentsTest ? "‚úÖ" : "‚ùå")}");
            Console.WriteLine($"   –¢–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {(results.TickDataTest ? "‚úÖ" : "‚ùå")}");
            Console.WriteLine($"   OBIZ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {(results.OBIZStrategyTest ? "‚úÖ" : "‚ùå")}");
            Console.WriteLine($"   –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {(results.IntegratedServiceTest ? "‚úÖ" : "‚ùå")}");
            Console.WriteLine($"   –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏: {(results.PositionManagementTest ? "‚úÖ" : "‚ùå")}");
            Console.WriteLine();
            Console.WriteLine($"üéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {(results.OverallSuccess ? "‚úÖ –£–°–ü–ï–•" : "‚ùå –û–®–ò–ë–ö–ê")}");

            if (!results.OverallSuccess && !string.IsNullOrEmpty(results.ErrorMessage))
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {results.ErrorMessage}");
            }

            Console.WriteLine();
            Console.WriteLine("üí° –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ OBIZ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ config.json:");
            Console.WriteLine("   \"Strategy\": { \"Mode\": \"OBIZOnly\", \"EnableOBIZStrategy\": true }");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
        }
        
        Console.WriteLine();
        Console.WriteLine("‚úÖ –¢–µ—Å—Ç OBIZ-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω");
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OBIZ-Score —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    /// </summary>
    static async Task TestOBIZComponentsAsync()
    {
        Console.WriteLine("üß™ –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í OBIZ-SCORE –°–¢–†–ê–¢–ï–ì–ò–ò");
        Console.WriteLine("========================================");
        
        try
        {
            Console.WriteLine("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:");
            Console.WriteLine("1 - Trades (—Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)");
            Console.WriteLine("2 - OrderBook (—Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫)");
            Console.WriteLine("3 - WebSocket (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)");
            Console.WriteLine("4 - Integration (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)");
            Console.WriteLine("5 - ALL (–≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–¥—Ä—è–¥)");
            Console.WriteLine();
            Console.Write("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞ (1-5): ");
            
            var input = Console.ReadLine();
            
            using var tester = new ComponentTester();
            
            switch (input)
            {
                case "1":
                    Console.WriteLine("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Trades...");
                    await tester.TestTradesAsync("ETHUSDT");
                    break;
                    
                case "2":
                    Console.WriteLine("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ OrderBook...");
                    await tester.TestOrderBookAsync("ETHUSDT");
                    break;
                    
                case "3":
                    Console.WriteLine("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ WebSocket...");
                    Console.WriteLine("‚ö†Ô∏è –¢–µ—Å—Ç –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è 30 —Å–µ–∫—É–Ω–¥...");
                    await tester.TestWebSocketAsync("ETHUSDT", 30);
                    break;
                    
                case "4":
                    Console.WriteLine("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Integration...");
                    await tester.TestIntegrationAsync("ETHUSDT");
                    break;
                    
                case "5":
                    Console.WriteLine("üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...");
                    await tester.RunAllTestsAsync("ETHUSDT");
                    break;
                    
                default:
                    Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã...");
                    await tester.RunAllTestsAsync("ETHUSDT");
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
        }
        
        Console.WriteLine();
        Console.WriteLine("‚úÖ –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OBIZ-Score –∑–∞–≤–µ—Ä—à–µ–Ω");
    }
}