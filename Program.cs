using System;
using System.Threading.Tasks;
using System.IO;
using Binance.Net;
using Binance.Net.Clients;
using CryptoExchange.Net.Authentication;
using Trading;
using Config;
using Testing;
using Microsoft.Extensions.Configuration;
using Services;
using Models;

class Program
{
    static void LoadEnvFile()
    {
        try
        {
            if (!File.Exists(".env")) return;
            var lines = File.ReadAllLines(".env");
            foreach (var raw in lines)
            {
                var line = raw.Trim();
                if (string.IsNullOrWhiteSpace(line) || line.StartsWith("#")) continue;
                var idx = line.IndexOf('=');
                if (idx <= 0) continue;
                var key = line.Substring(0, idx).Trim();
                var val = line.Substring(idx + 1).Trim().Trim('"');
                Environment.SetEnvironmentVariable(key, val);
            }
        }
        catch { }
    }

    static async Task Main(string[] args)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        if (args.Length > 0)
        {
            switch (args[0].ToLower())
            {
                case "test-pool":
                    await UniversalTester.TestCoinPoolAsync();
                    return;
                
                case "test-websocket":
                    await UniversalTester.TestWebSocketAsync();
                    return;
                
                case "test-strategy":
                    await UniversalTester.TestStrategyAsync();
                    return;
                
                case "test-hft":
                    await UniversalTester.TestHftSystemAsync();
                    return;
                
                case "test-auto":
                    await UniversalTester.TestAutoTradingAsync();
                    return;
                
                case "test-all":
                    await UniversalTester.RunAllTestsAsync();
                    return;
                    
                default:
                    Console.WriteLine("üöÄ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:");
                    Console.WriteLine("==================================");
                    Console.WriteLine("  test-pool       - –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É–ª–∞ –º–æ–Ω–µ—Ç");
                    Console.WriteLine("  test-websocket  - –¢–µ—Å—Ç WebSocket real-time –¥–∞–Ω–Ω—ã—Ö");
                    Console.WriteLine("  test-strategy   - –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤");
                    Console.WriteLine("  test-hft        - –¢–µ—Å—Ç –ø—Å–µ–≤–¥–æ-HFT —Å–∏—Å—Ç–µ–º—ã");
                    Console.WriteLine("  test-auto       - –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏");
                    Console.WriteLine("  test-all        - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ");
                    Console.WriteLine();
                    Console.WriteLine("üí° –î–ª—è –æ–±—ã—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
                    return;
            }
        }

        // –ê–í–¢–û–ù–û–ú–ù–´–ô –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        LoadEnvFile();
        
        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
        var apiKey = Environment.GetEnvironmentVariable("BINANCE_API_KEY");
        var apiSecret = Environment.GetEnvironmentVariable("BINANCE_API_SECRET");

        if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(apiSecret))
        {
            Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ");
            Console.WriteLine("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞ –º–æ–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dotnet run test-pool");
            return;
        }

        Console.WriteLine("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ù–û–ú–ù–û–ô –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´");
        Console.WriteLine("=====================================");
        Console.WriteLine("ü§ñ –†–µ–∂–∏–º: –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ù–û–ú–ù–û–°–¢–¨");
        Console.WriteLine("üîÑ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–ö–õ–Æ–ß–ï–ù–û");
        Console.WriteLine("üíæ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –í–ö–õ–Æ–ß–ï–ù–û");
        Console.WriteLine("üõ°Ô∏è –ù–∞–¥–µ–∂–Ω—ã–µ WebSocket: –í–ö–õ–Æ–ß–ï–ù–´");
        Console.WriteLine();

        // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–≤–∏–∂–æ–∫
        var autonomousEngine = new AutonomousEngine(apiKey, apiSecret);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        var cts = new CancellationTokenSource();
        Console.CancelKeyPress += (s, e) =>
        {
            e.Cancel = true;
            Console.WriteLine();
            Console.WriteLine("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...");
            autonomousEngine.Stop();
            cts.Cancel();
        };

        try
        {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–≤–∏–∂–æ–∫
            var autonomousTask = autonomousEngine.StartAsync();
            
            // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            var delayTask = Task.Delay(-1, cts.Token);
            
            await Task.WhenAny(autonomousTask, delayTask);
            
            // –ï—Å–ª–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–∞–º - –∂–¥–µ–º –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if (autonomousTask.IsCompleted)
            {
                await autonomousTask;
            }
            else
            {
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ Ctrl+C - –∂–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–≤–∏–∂–∫–∞
                try
                {
                    await autonomousTask;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {ex.Message}");
                }
            }
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        var uptime = DateTime.UtcNow - DateTime.UtcNow; // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üõë –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.TotalHours:F1} —á–∞—Å–æ–≤");
        
        Console.WriteLine("‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }
}