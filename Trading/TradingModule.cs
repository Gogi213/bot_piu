using System;
using System.Threading.Tasks;
using Binance.Net;
using Binance.Net.Clients;
using Binance.Net.Objects;
using Binance.Net.Enums;
using Config;
using WebSocket;

namespace Trading
{
    public class TradingModule
    {
        private readonly BinanceRestClient _restClient;
        private readonly BinanceSocketClient _socketClient;
        private readonly TradingConfig _config;
        private PriceWebSocketClient? _priceWebSocket;
        private OrderWebSocketClient? _orderWebSocket;
        private decimal _currentPrice;

        public TradingModule(BinanceRestClient restClient, BinanceSocketClient socketClient, TradingConfig config)
        {
            _restClient = restClient;
            _socketClient = socketClient;
            _config = config;
        }

        public async Task InitializeWebSocketAsync()
        {
            // –ü–æ–ª—É—á–∞–µ–º listen key –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤
            var listenKeyResponse = await _restClient.UsdFuturesApi.Account.StartUserStreamAsync();
            if (!listenKeyResponse.Success)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è listen key: {listenKeyResponse.Error}");
            }

            var listenKey = listenKeyResponse.Data;

            // –°–æ–∑–¥–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç—ã
            _priceWebSocket = new PriceWebSocketClient(_socketClient, _config.Symbol);
            _orderWebSocket = new OrderWebSocketClient(_socketClient, listenKey);

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
            _priceWebSocket.OnPriceUpdate += (price) =>
            {
                _currentPrice = price;
            };

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
            _orderWebSocket.OnOrderUpdate += (orderData) =>
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üì° WebSocket –æ—Ä–¥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {orderData.OrderId}, —Å—Ç–∞—Ç—É—Å: {orderData.Status}");
            };

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await _priceWebSocket.ConnectAsync();
            await _orderWebSocket.ConnectAsync();

            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await Task.Delay(1000);
        }

        public async Task<decimal> GetCurrentPriceAsync()
        {
            if (_priceWebSocket != null && _priceWebSocket.IsConnected())
            {
                if (_currentPrice > 0)
                    return _currentPrice;
            }

            // Fallback to REST API if WebSocket not available or price is 0
            var priceResponse = await _restClient.UsdFuturesApi.ExchangeData.GetPriceAsync(_config.Symbol);
            if (!priceResponse.Success)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {priceResponse.Error}");
            }
            if (priceResponse.Data.Price <= 0)
            {
                throw new Exception($"–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è {_config.Symbol}: {priceResponse.Data.Price}");
            }
            return priceResponse.Data.Price;
        }

        public async Task<(decimal quantity, decimal takePrice, decimal stopPrice, decimal tickSize)> CalculateOrderParametersAsync(decimal currentPrice)
        {
            if (currentPrice <= 0)
            {
                throw new ArgumentException($"–ù–µ–≤–µ—Ä–Ω–∞—è —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {currentPrice}");
            }
            
            var quantity = Math.Floor(_config.UsdAmount / currentPrice);
            var tickSize = _config.TickSize;
            
            bool isBuy = _config.Side.ToUpper() == "BUY";
            
            decimal takePrice, stopPrice;
            
            if (isBuy)
            {
                // BUY: —Ç–µ–π–∫ –≤—ã—à–µ, —Å—Ç–æ–ø –Ω–∏–∂–µ
                takePrice = Math.Round(currentPrice * (1 + _config.TakeProfitPercent / 100) / tickSize) * tickSize;
                stopPrice = Math.Round(currentPrice * (1 - _config.StopLossPercent / 100) / tickSize) * tickSize;
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è BUY
                if (stopPrice >= currentPrice)
                {
                    stopPrice = Math.Round(currentPrice * (1 - _config.StopLossPercent / 100 * 2) / tickSize) * tickSize;
                }
            }
            else
            {
                // SELL: —Ç–µ–π–∫ –Ω–∏–∂–µ, —Å—Ç–æ–ø –≤—ã—à–µ
                takePrice = Math.Round(currentPrice * (1 - _config.TakeProfitPercent / 100) / tickSize) * tickSize;
                stopPrice = Math.Round(currentPrice * (1 + _config.StopLossPercent / 100) / tickSize) * tickSize;
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è SELL
                if (stopPrice <= currentPrice)
                {
                    stopPrice = Math.Round(currentPrice * (1 + _config.StopLossPercent / 100 * 2) / tickSize) * tickSize;
                }
            }

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã {_config.Side}: —Ü–µ–Ω–∞={currentPrice:F6}, —Ç–µ–π–∫={takePrice:F6}, —Å—Ç–æ–ø={stopPrice:F6}");
            
            return (quantity, takePrice, stopPrice, tickSize);
        }

        public async Task<dynamic> PlaceEntryOrderAsync(decimal quantity)
        {
            var side = _config.Side.ToUpper() == "SELL" ? Binance.Net.Enums.OrderSide.Sell : Binance.Net.Enums.OrderSide.Buy;
            var entryOrder = await _restClient.UsdFuturesApi.Trading.PlaceOrderAsync(
                symbol: _config.Symbol,
                side: side,
                type: Binance.Net.Enums.FuturesOrderType.Market,
                quantity: quantity
            );

            if (!entryOrder.Success)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {entryOrder.Error}");
            }

            return entryOrder.Data;
        }

        public async Task<dynamic> PlaceTakeProfitOrderAsync(decimal quantity, decimal takePrice)
        {
            var side = _config.Side.ToUpper() == "SELL" ? Binance.Net.Enums.OrderSide.Buy : Binance.Net.Enums.OrderSide.Sell;
            var takeOrder = await _restClient.UsdFuturesApi.Trading.PlaceOrderAsync(
                symbol: _config.Symbol,
                side: side,
                type: Binance.Net.Enums.FuturesOrderType.TakeProfitMarket,
                quantity: quantity,
                stopPrice: takePrice
            );

            if (!takeOrder.Success)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ take –æ—Ä–¥–µ—Ä–∞: {takeOrder.Error}");
            }

            return takeOrder.Data;
        }

        public async Task<dynamic> PlaceStopLossOrderAsync(decimal quantity, decimal stopPrice)
        {
            var side = _config.Side.ToUpper() == "SELL" ? Binance.Net.Enums.OrderSide.Buy : Binance.Net.Enums.OrderSide.Sell;
            var stopOrder = await _restClient.UsdFuturesApi.Trading.PlaceOrderAsync(
                symbol: _config.Symbol,
                side: side,
                type: Binance.Net.Enums.FuturesOrderType.StopMarket,
                quantity: quantity,
                stopPrice: stopPrice
            );

            if (!stopOrder.Success)
            {
                throw new Exception($"–û—à–∏–±–∫–∞ stop –æ—Ä–¥–µ—Ä–∞: {stopOrder.Error}");
            }

            return stopOrder.Data;
        }

        public async Task MonitorOrdersAsync(dynamic takeOrder, dynamic stopOrder, decimal entryPrice)
        {
            bool breakEvenActivated = false;
            bool isBuy = _config.Side.ToUpper() == "BUY";

            while (true)
            {
                try
                {
                    decimal currentPrice = 0;
                    if (_config.EnableBreakEven && !breakEvenActivated)
                    {
                        currentPrice = await GetCurrentPriceAsync();
                    }

                    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–æ–≤
                    var takeStatusTask = _restClient.UsdFuturesApi.Trading.GetOrderAsync(_config.Symbol, takeOrder.Id);
                    var stopStatusTask = _restClient.UsdFuturesApi.Trading.GetOrderAsync(_config.Symbol, stopOrder.Id);

                    await Task.WhenAll(takeStatusTask, stopStatusTask);

                    var takeStatus = takeStatusTask.Result;
                    var stopStatus = stopStatusTask.Result;

                    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑—É–±—ã—Ç–∫–∞
                    if (_config.EnableBreakEven && !breakEvenActivated && currentPrice > 0)
                    {
                        bool shouldActivateBreakEven = false;
                        
                        if (isBuy)
                        {
                            // BUY: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
                            var breakEvenActivationPrice = entryPrice * (1 + _config.BreakEvenActivationPercent / 100);
                            shouldActivateBreakEven = currentPrice >= breakEvenActivationPrice;
                        }
                        else
                        {
                            // SELL: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
                            var breakEvenActivationPrice = entryPrice * (1 - _config.BreakEvenActivationPercent / 100);
                            shouldActivateBreakEven = currentPrice <= breakEvenActivationPrice;
                        }

                        if (shouldActivateBreakEven)
                        {
                            var breakEvenStartTime = DateTime.Now;
                            var triggerPercent = Math.Abs((currentPrice - entryPrice) / entryPrice) * 100;
                            Console.WriteLine($"[{breakEvenStartTime:HH:mm:ss.fff}] ‚ö° –¢–†–ò–ì–ì–ï–† –ë–ï–ó–£–ë–´–¢–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! (—Ü–µ–Ω–∞: {currentPrice:F6}, {triggerPercent:F2}%)");

                            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ø –¥–ª—è –±–µ–∑—É–±—ã—Ç–∫–∞
                            decimal breakEvenStopPrice;
                            if (isBuy)
                            {
                                // BUY: –±–µ–∑—É–±—ã—Ç–æ–∫ —Å—Ç–æ–ø
                                if (_config.BreakEvenStopLossPercent == 0)
                                {
                                    breakEvenStopPrice = entryPrice; // –¢–æ—á–Ω–æ –Ω–∞ –≤—Ö–æ–¥–µ
                                }
                                else
                                {
                                    breakEvenStopPrice = Math.Round(entryPrice * (1 + _config.BreakEvenStopLossPercent / 100) / _config.TickSize) * _config.TickSize;
                                }
                            }
                            else
                            {
                                // SELL: –±–µ–∑—É–±—ã—Ç–æ–∫ —Å—Ç–æ–ø
                                if (_config.BreakEvenStopLossPercent == 0)
                                {
                                    breakEvenStopPrice = entryPrice; // –¢–æ—á–Ω–æ –Ω–∞ –≤—Ö–æ–¥–µ
                                }
                                else
                                {
                                    breakEvenStopPrice = Math.Round(entryPrice * (1 - _config.BreakEvenStopLossPercent / 100) / _config.TickSize) * _config.TickSize;
                                }
                            }

                            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üîÑ –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑—É–±—ã—Ç–∫–∞: {breakEvenStopPrice:F6} (–±—ã–ª–æ {_config.BreakEvenStopLossPercent}% –æ—Ç {entryPrice:F6})");

                            // –ë–´–°–¢–†–ê–Ø –æ—Ç–º–µ–Ω–∞ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                            var cancelStart = DateTime.Now;
                            var cancelTask = await _restClient.UsdFuturesApi.Trading.CancelOrderAsync(_config.Symbol, stopOrder.Id);
                            var cancelTime = DateTime.Now - cancelStart;

                            if (cancelTask.Success)
                            {
                                var placeStart = DateTime.Now;
                                var newStopOrderTask = await _restClient.UsdFuturesApi.Trading.PlaceOrderAsync(
                                    symbol: _config.Symbol,
                                    side: isBuy ? Binance.Net.Enums.OrderSide.Sell : Binance.Net.Enums.OrderSide.Buy,
                                    type: Binance.Net.Enums.FuturesOrderType.StopMarket,
                                    quantity: stopOrder.Quantity,
                                    stopPrice: breakEvenStopPrice
                                );
                                var placeTime = DateTime.Now - placeStart;
                                var totalTime = DateTime.Now - cancelStart;

                                if (newStopOrderTask.Success)
                                {
                                    stopOrder = newStopOrderTask.Data;
                                    breakEvenActivated = true;
                                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –ë–ï–ó–£–ë–´–¢–û–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù (—Å—Ç–æ–ø: {breakEvenStopPrice:F6}, ID: {stopOrder.Id}) [–æ—Ç–º–µ–Ω–∞: {cancelTime.TotalMilliseconds:F0}ms, –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞: {placeTime.TotalMilliseconds:F0}ms, –≤—Å–µ–≥–æ: {totalTime.TotalMilliseconds:F0}ms]");
                                }
                                else
                                {
                                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ–∑—É–±—ã—Ç–∫–∞: {newStopOrderTask.Error}");
                                }
                            }
                            else
                            {
                                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –±–µ–∑—É–±—ã—Ç–∫–∞: {cancelTask.Error}");
                            }
                        }
                    }

                    // –ï—Å–ª–∏ take –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω - –æ—Ç–º–µ–Ω—è–µ–º stop
                    if (takeStatus.Success && takeStatus.Data.Status == Binance.Net.Enums.OrderStatus.Filled)
                    {
                        var exitPrice = await GetCurrentPriceAsync();
                        var profitPercent = Math.Abs((exitPrice - entryPrice) / entryPrice) * 100;
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üéØ Take-–ø—Ä–æ—Ñ–∏—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω! –û—Ç–º–µ–Ω—è—é —Å—Ç–æ–ø-–ª–æ—Å—Å... (—Ü–µ–Ω–∞: {exitPrice:F6}, +{profitPercent:F2}%)");
                        await _restClient.UsdFuturesApi.Trading.CancelOrderAsync(_config.Symbol, stopOrder.Id);
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤ –ø—Ä–∏–±—ã–ª—å! (—Ü–µ–Ω–∞: {exitPrice:F6}, +{profitPercent:F2}%)");
                        break;
                    }

                    // –ï—Å–ª–∏ stop –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω - –æ—Ç–º–µ–Ω—è–µ–º take
                    if (stopStatus.Success && stopStatus.Data.Status == Binance.Net.Enums.OrderStatus.Filled)
                    {
                        var exitPrice = await GetCurrentPriceAsync();
                        var lossPercent = Math.Abs((exitPrice - entryPrice) / entryPrice) * 100;
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ùå –°—Ç–æ–ø-–ª–æ—Å—Å –∏—Å–ø–æ–ª–Ω–µ–Ω! –û—Ç–º–µ–Ω—è—é —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç... (—Ü–µ–Ω–∞: {exitPrice:F6}, -{lossPercent:F2}%)");
                        await _restClient.UsdFuturesApi.Trading.CancelOrderAsync(_config.Symbol, takeOrder.Id);
                        Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤ —É–±—ã—Ç–æ–∫! (—Ü–µ–Ω–∞: {exitPrice:F6}, -{lossPercent:F2}%)");
                        break;
                    }

                    await Task.Delay((int)(_config.MonitorIntervalSeconds * 1000));
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
                    await Task.Delay(1000);
                }
            }
        }

        public async Task ExecuteTradeAsync()
        {
            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏: {_config.Side} {_config.Symbol}");
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è realtime –¥–∞–Ω–Ω—ã—Ö
                await InitializeWebSocketAsync();

                var currentPrice = await GetCurrentPriceAsync();

                var (quantity, takePrice, stopPrice, tickSize) = await CalculateOrderParametersAsync(currentPrice);

                // –†–∞–∑–º–µ—â–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π –æ—Ä–¥–µ—Ä
                var entryOrder = await PlaceEntryOrderAsync(quantity);
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ –í—Ö–æ–¥–Ω–æ–π –æ—Ä–¥–µ—Ä {_config.Side} —Ä–∞–∑–º–µ—â–µ–Ω: {entryOrder.Id} (—Ü–µ–Ω–∞: {currentPrice:F6})");

                // –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –±–µ–∑—É–±—ã—Ç–∫–∞
                var entryPrice = currentPrice;

                // –†–∞–∑–º–µ—â–∞–µ–º TAKE PROFIT –æ—Ä–¥–µ—Ä
                var takeOrder = await PlaceTakeProfitOrderAsync(quantity, takePrice);
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ Take PROFIT –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {takeOrder.Id} (—É—Ä–æ–≤–µ–Ω—å: {takePrice:F6})");

                // –†–∞–∑–º–µ—â–∞–µ–º STOP LOSS –æ—Ä–¥–µ—Ä
                var stopOrder = await PlaceStopLossOrderAsync(quantity, stopPrice);
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚úÖ Stop LOSS –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {stopOrder.Id} (—É—Ä–æ–≤–µ–Ω—å: {stopPrice:F6})");

                if (_config.EnableBreakEven)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] ‚öôÔ∏è –ë–µ–∑—É–±—ã—Ç–æ–∫ –≤–∫–ª—é—á–µ–Ω: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ {_config.BreakEvenActivationPercent}%, —Å—Ç–æ–ø –ø—Ä–∏ {_config.BreakEvenStopLossPercent}%");
                }

                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ —Å WebSocket
                await MonitorOrdersAsync(takeOrder, stopOrder, entryPrice);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
            }
            finally
            {
                // –û—Ç–∫–ª—é—á–∞–µ–º WebSocket –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                if (_priceWebSocket != null)
                    await _priceWebSocket.DisconnectAsync();
                if (_orderWebSocket != null)
                    await _orderWebSocket.DisconnectAsync();
            }
        }
    }
}